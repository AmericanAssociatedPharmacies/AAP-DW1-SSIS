<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/12/2017 9:53:23 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AAP-N202"
  DTS:CreatorName="AAP\sedwards"
  DTS:DTSID="{061BBC90-F8F5-4610-9B04-26DF38292392}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="ClaimsDDS_FDS_ODSIntake_ClaimsFileLoad"
  DTS:PackageType="5"
  DTS:VersionBuild="106"
  DTS:VersionGUID="{8B09EB50-74A0-4A6D-99A6-CAF0841F642B}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[AAPDW1.ClaimsDDS]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{B9F8814D-41B8-46CF-93DC-B1D59F69CFA3}"
      DTS:ObjectName="AAPDW1.ClaimsDDS">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=AAPDW1;Initial Catalog=ClaimsDDS;Provider=SQLNCLI11.1;Integrated Security=SSPI;Packet Size=32767;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[AAPDW1.ODSIntake]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{E445FE49-1BA7-4D82-A00C-713D6293CB40}"
      DTS:ObjectName="AAPDW1.ODSIntake">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=AAPDW1;Initial Catalog=ODSIntake;Provider=SQLNCLI11.1;Integrated Security=SSPI;Packet Size=32767;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{ECA8AE31-679A-4C99-8F06-25CF84DB48E8}"
      DTS:ObjectName="varFileDir">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">\\db1\c$\Rx30\Staging\</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{56427061-36ED-4355-AA05-4F59D2335BBA}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ADORecordSet">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{4BB52E7B-7E96-48FB-B55A-2FC606DF4ABE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varArchiveFile">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{07CB8F1C-C6BB-40F2-B644-CB8786A4A052}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="varDate">
      <DTS:VariableValue
        DTS:DataType="3">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{22ACF69C-83C3-4D3C-89CF-73C0D31D6BCE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varStagingFile">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:DelayValidation="True"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{C7BA6842-B077-45B4-AB0E-922044658125}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{6C91DE22-4F2C-40EF-A645-2CBD70F17145}"
        DTS:ObjectName="{6C91DE22-4F2C-40EF-A645-2CBD70F17145}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::ADORecordSet" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Date Variable to Load"
          DTS:CreationName="Microsoft.ExecuteSQLTask"
          DTS:Description="Execute SQL Task"
          DTS:DTSID="{BC0CF552-2E2B-4D4A-87B2-B4E643AA73CB}"
          DTS:ExecutableType="Microsoft.ExecuteSQLTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Date Variable to Load"
          DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <SQLTask:SqlTaskData
              SQLTask:Connection="{E445FE49-1BA7-4D82-A00C-713D6293CB40}"
              SQLTask:SqlStatementSource="EXEC dbo.usp_FDS_CurrentThreeYears"
              SQLTask:ResultType="ResultSetType_SingleRow" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask">
              <SQLTask:ResultBinding
                SQLTask:ResultName="VarDate"
                SQLTask:DtsVariableName="User::varDate" />
              <SQLTask:ParameterBinding
                SQLTask:ParameterName="@VarDate"
                SQLTask:DtsVariableName="User::varDate"
                SQLTask:ParameterDirection="Input"
                SQLTask:DataType="3"
                SQLTask:ParameterSize="-1" />
            </SQLTask:SqlTaskData>
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Delete file"
          DTS:CreationName="Microsoft.FileSystemTask"
          DTS:DelayValidation="True"
          DTS:Description="File System Task"
          DTS:DTSID="{3AEFD487-BD4B-44FB-82D5-15BE1FDFB409}"
          DTS:ExecutableType="Microsoft.FileSystemTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Delete file"
          DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="DeleteFile"
              TaskSourcePath="User::varStagingFile"
              TaskIsSourceVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Parse and load file"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{959E8517-7A7E-43A2-A9B8-A0116AE8CCE8}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Parse and load file"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\Conditional Split"
                  componentClassID="Microsoft.ConditionalSplit"
                  contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                  name="Conditional Split"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Inputs[Conditional Split Input]"
                      description="Input to the Conditional Split Transformation"
                      name="Conditional Split Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Inputs[Conditional Split Input].Columns[DateKey]"
                          cachedDataType="i4"
                          cachedName="DateKey"
                          lineageId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Output].Columns[DateKey]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[GoodDateKey]"
                      description="Output 1 of the Conditional Split Transformation"
                      errorOrTruncationOperation="Computation"
                      errorRowDisposition="FailComponent"
                      exclusionGroup="1"
                      name="GoodDateKey"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Inputs[Conditional Split Input]"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                          name="Expression">#{Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Output].Columns[DateKey]} &gt;= @[User::varDate]</property>
                        <property
                          containsID="true"
                          dataType="System.String"
                          description="Specifies the friendly version of the expression. This expression version uses column names."
                          expressionType="Notify"
                          name="FriendlyExpression">DateKey &gt;= @[User::varDate]</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                          name="EvaluationOrder">0</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[Conditional Split Default Output]"
                      description="Default Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      name="Conditional Split Default Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Inputs[Conditional Split Input]">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          name="IsDefaultOut">true</property>
                      </properties>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[Conditional Split Error Output]"
                      description="Error Output of the Conditional Split Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Conditional Split Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Inputs[Conditional Split Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\Derived Column"
                  componentClassID="Microsoft.DerivedColumn"
                  contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                  description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                  name="Derived Column"
                  usesDispositions="true">
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Parse and load file\Derived Column.Inputs[Derived Column Input]"
                      description="Input to the Derived Column Transformation"
                      name="Derived Column Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\Derived Column.Inputs[Derived Column Input].Columns[TransactionDate]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="TransactionDate"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TransactionDate]" />
                      </inputColumns>
                      <externalMetadataColumns />
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Output]"
                      description="Default Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      name="Derived Column Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Output].Columns[DateKey]"
                          dataType="i4"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="FailComponent"
                          lineageId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Output].Columns[DateKey]"
                          name="DateKey"
                          truncationRowDisposition="FailComponent">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Expression"
                              name="Expression">(DT_I4)((DT_WSTR,4)[YEAR]((DT_DBTIMESTAMP2,7)#{Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TransactionDate]}) + [RIGHT]("0" + (DT_WSTR,2)[MONTH]((DT_DBTIMESTAMP2,7)#{Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TransactionDate]}),2) + [RIGHT]("0" + (DT_WSTR,2)[DAY]((DT_DBTIMESTAMP2,7)#{Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TransactionDate]}),2))</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Derived Column Friendly Expression"
                              expressionType="Notify"
                              name="FriendlyExpression">(DT_I4)((DT_WSTR,4)YEAR((DT_DBTIMESTAMP2,7)TransactionDate) + RIGHT("0" + (DT_WSTR,2)MONTH((DT_DBTIMESTAMP2,7)TransactionDate),2) + RIGHT("0" + (DT_WSTR,2)DAY((DT_DBTIMESTAMP2,7)TransactionDate),2))</property>
                          </properties>
                        </outputColumn>
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Error Output]"
                      description="Error Output of the Derived Column Transformation"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="Derived Column Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\Derived Column.Inputs[Derived Column Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\DW1"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="DW1"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[Staging].[FDS]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Parse and load file\DW1.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                      connectionManagerRefId="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[FileRowID]"
                          cachedDataType="i4"
                          cachedName="FileRowID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[FileRowID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FileRowID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ClaimStatusCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ClaimStatusCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ClaimStatusCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ClaimStatusCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ServiceProviderIDQualifier]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ServiceProviderIDQualifier"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ServiceProviderIDQualifier]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ServiceProviderIDQualifier]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ServiceProviderID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ServiceProviderID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ServiceProviderID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ServiceProviderID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[TransactionDate]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="TransactionDate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[TransactionDate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TransactionDate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[RxNumber]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RxNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RxNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RxNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[RefillNumber]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RefillNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RefillNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RefillNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[FillDate]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="FillDate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[FillDate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FillDate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DispensedProductQualifier]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DispensedProductQualifier"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensedProductQualifier]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensedProductQualifier]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DispensedProductID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DispensedProductID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensedProductID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensedProductID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PayerSequence]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PayerSequence"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PayerSequence]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PayerSequence]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[BIN]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="BIN"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[BIN]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BIN]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PCN]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PCN"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PCN]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PCN]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[GroupNumber]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="GroupNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[GroupNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[GroupNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[InsurerCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="InsurerCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[InsurerCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[InsurerCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[InsurerName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="InsurerName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[InsurerName]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[InsurerName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PlanCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PlanCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PlanCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlanCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PlanName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PlanName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PlanName]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlanName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberQualifier]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberQualifier"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberQualifier]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberQualifier]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberSubmittedID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberSubmittedID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberSubmittedID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberSubmittedID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberLastName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberLastName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberLastName]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberLastName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberFirstName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberFirstName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberFirstName]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberFirstName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberStreetAddress]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberStreetAddress"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberStreetAddress]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberStreetAddress]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberCity]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberCity"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberCity]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberCity]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberStateCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberStateCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberStateCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberStateCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberZipCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberZipCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberZipCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberZipCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriberPhoneNumber]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberPhoneNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberPhoneNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberPhoneNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[OriginallyPrescribedProduct]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="OriginallyPrescribedProduct"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[OriginallyPrescribedProduct]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OriginallyPrescribedProduct]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescribedRefills]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescribedRefills"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescribedRefills]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescribedRefills]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[RxExpirationDate]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RxExpirationDate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RxExpirationDate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RxExpirationDate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DAW]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DAW"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DAW]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DAW]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DateWritten]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DateWritten"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DateWritten]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DateWritten]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[OriginCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="OriginCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[OriginCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OriginCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[CompoundCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="CompoundCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[CompoundCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CompoundCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[TotalQuantity]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="TotalQuantity"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[TotalQuantity]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TotalQuantity]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ContractCost]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ContractCost"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ContractCost]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ContractCost]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[AverageWholeSalePrice]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="AverageWholeSalePrice"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[AverageWholeSalePrice]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AverageWholeSalePrice]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[UsualAndCustomary]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="UsualAndCustomary"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[UsualAndCustomary]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[UsualAndCustomary]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[CopayAmountSubmitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="CopayAmountSubmitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[CopayAmountSubmitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CopayAmountSubmitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[IngredientCostSubmitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="IngredientCostSubmitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IngredientCostSubmitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IngredientCostSubmitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DispensingFeeSubmitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DispensingFeeSubmitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensingFeeSubmitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensingFeeSubmitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[IncentiveFeeSubmitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="IncentiveFeeSubmitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IncentiveFeeSubmitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IncentiveFeeSubmitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[SalesTaxSubmitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="SalesTaxSubmitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[SalesTaxSubmitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SalesTaxSubmitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[CopayAmountPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="CopayAmountPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[CopayAmountPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CopayAmountPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[IngredientCostPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="IngredientCostPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IngredientCostPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IngredientCostPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DispensingFeePaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DispensingFeePaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensingFeePaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensingFeePaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[SalesTaxPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="SalesTaxPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[SalesTaxPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SalesTaxPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[IncentiveFeePaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="IncentiveFeePaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IncentiveFeePaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IncentiveFeePaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ClaimAmountPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ClaimAmountPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ClaimAmountPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ClaimAmountPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[BasisOfCostCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="BasisOfCostCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[BasisOfCostCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BasisOfCostCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[QuantityDispensed]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="QuantityDispensed"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[QuantityDispensed]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[QuantityDispensed]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DaysSupply]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DaysSupply"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DaysSupply]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DaysSupply]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PharmacistInitials]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PharmacistInitials"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PharmacistInitials]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PharmacistInitials]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[RejectMessageCount]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RejectMessageCount"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RejectMessageCount]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RejectMessageCount]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[RejectMessages]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RejectMessages"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RejectMessages]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RejectMessages]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[AuthorizationNumber]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="AuthorizationNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[AuthorizationNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AuthorizationNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[BasisOfReimbursementDetermination]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="BasisOfReimbursementDetermination"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[BasisOfReimbursementDetermination]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BasisOfReimbursementDetermination]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PlaceOfService]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PlaceOfService"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PlaceOfService]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlaceOfService]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ProviderIDQualifier]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ProviderIDQualifier"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ProviderIDQualifier]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProviderIDQualifier]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ProviderID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ProviderID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ProviderID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProviderID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[AdjustedContractCost]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="AdjustedContractCost"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[AdjustedContractCost]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AdjustedContractCost]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[P340BCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="P340BCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[P340BCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[P340BCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PrescriptionStatus]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriptionStatus"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriptionStatus]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriptionStatus]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[ProductSource]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ProductSource"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ProductSource]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProductSource]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[PMID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PMID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PMID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PMID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[FileSource]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="1000"
                          cachedName="FileSource"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[FileSource]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FileSource]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[RowCreatedDate]"
                          cachedDataType="dbTimeStamp"
                          cachedName="RowCreatedDate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RowCreatedDate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RowCreatedDate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[DateKey]"
                          cachedDataType="i4"
                          cachedName="DateKey"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DateKey]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Output].Columns[DateKey]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[eVoucherAmountPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="eVoucherAmountPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[eVoucherAmountPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[eVoucherAmountPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[OtherPayerAmountPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="OtherPayerAmountPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[OtherAmountPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OtherPayerAmountPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[StoreRebate]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="StoreRebate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[StoreRebate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[StoreRebate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].Columns[SIG]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="SIG"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[SIG]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SIG]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RowID]"
                          dataType="i4"
                          name="RowID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[FileRowID]"
                          dataType="i4"
                          name="FileRowID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ClaimStatusCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ClaimStatusCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ServiceProviderIDQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ServiceProviderIDQualifier" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ServiceProviderID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ServiceProviderID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[TransactionDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="TransactionDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RxNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RxNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RefillNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RefillNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[FillDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="FillDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensedProductQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DispensedProductQualifier" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensedProductID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DispensedProductID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PayerSequence]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PayerSequence" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[BIN]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="BIN" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PCN]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PCN" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[GroupNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="GroupNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[InsurerCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="InsurerCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[InsurerName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="InsurerName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PlanCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PlanCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PlanName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PlanName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberQualifier" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberSubmittedID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberSubmittedID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberLastName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberLastName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberFirstName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberFirstName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberStreetAddress]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberStreetAddress" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberCity]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberCity" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberStateCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberStateCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberZipCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberZipCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberPhoneNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberPhoneNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[OriginallyPrescribedProduct]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="OriginallyPrescribedProduct" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescribedRefills]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescribedRefills" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RxExpirationDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RxExpirationDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DAW]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DAW" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DateWritten]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DateWritten" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[OriginCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="OriginCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[CompoundCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="CompoundCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[TotalQuantity]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="TotalQuantity" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ContractCost]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ContractCost" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[AverageWholeSalePrice]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="AverageWholeSalePrice" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[UsualAndCustomary]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="UsualAndCustomary" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[CopayAmountSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="CopayAmountSubmitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IngredientCostSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="IngredientCostSubmitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensingFeeSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DispensingFeeSubmitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IncentiveFeeSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="IncentiveFeeSubmitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[SalesTaxSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="SalesTaxSubmitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[CopayAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="CopayAmountPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IngredientCostPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="IngredientCostPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DispensingFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DispensingFeePaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[SalesTaxPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="SalesTaxPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[IncentiveFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="IncentiveFeePaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ClaimAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ClaimAmountPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[BasisOfCostCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="BasisOfCostCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[QuantityDispensed]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="QuantityDispensed" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DaysSupply]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DaysSupply" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PharmacistInitials]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PharmacistInitials" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RejectMessageCount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RejectMessageCount" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RejectMessages]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RejectMessages" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[AuthorizationNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="AuthorizationNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[BasisOfReimbursementDetermination]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="BasisOfReimbursementDetermination" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PlaceOfService]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PlaceOfService" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ProviderIDQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ProviderIDQualifier" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ProviderID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ProviderID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[AdjustedContractCost]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="AdjustedContractCost" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[P340BCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="P340BCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PrescriptionStatus]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriptionStatus" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[ProductSource]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ProductSource" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[PMID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PMID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[FileSource]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          name="FileSource" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          name="RowCreatedDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[RowversionID]"
                          dataType="bytes"
                          length="8"
                          name="RowversionID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[DateKey]"
                          dataType="i4"
                          name="DateKey" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[eVoucherAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="eVoucherAmountPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[OtherAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="OtherAmountPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[StoreRebate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="StoreRebate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input].ExternalColumns[SIG]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="SIG" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\DW1.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\DW1.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\DW1.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\DW1.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\ErrorOut"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="ErrorOut"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[Error].[ErrorOutput]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[AAPDW1.ClaimsDDS]"
                      connectionManagerRefId="Package.ConnectionManagers[AAPDW1.ClaimsDDS]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[ErrorDateTime]"
                          cachedDataType="dbTimeStamp"
                          cachedName="ErrorDateTime"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDateTime]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDateTime]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[FQNFileName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="1000"
                          cachedName="FQNFileName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FQNFileName]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FQNFileName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[FileErrorRowNumber]"
                          cachedDataType="i4"
                          cachedName="FileErrorRowNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FileErrorRowNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FileErrorRowNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[ErrorData]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="ErrorData"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorData]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorData]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[ErrorDescription]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="ErrorDescription"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDescription]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[RowID]"
                          dataType="i4"
                          name="RowID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDateTime]"
                          dataType="dbTimeStamp"
                          name="ErrorDateTime" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FQNFileName]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          name="FQNFileName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FileErrorRowNumber]"
                          dataType="i4"
                          name="FileErrorRowNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorData]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          name="ErrorData" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          name="ErrorDescription" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          name="RowCreatedDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[StagingRowID]"
                          dataType="i4"
                          name="StagingRowID" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="ParseFlatFile"
                  version="10">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public FDSOutBuffer FDSOutBuffer;

    public ErrorOutBuffer ErrorOutBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != FDSOutBuffer)
        {
            FDSOutBuffer.SetEndOfRowset();
            FDSOutBuffer = null;
        }

        if (null != ErrorOutBuffer)
        {
            ErrorOutBuffer.SetEndOfRowset();
            ErrorOutBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"FDSOut"))
            {
                FDSOutBuffer = new FDSOutBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"ErrorOut"))
            {
                ErrorOutBuffer = new ErrorOutBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String varStagingFile
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["varStagingFile"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Runtime;
using System.IO;
using System.Text.RegularExpressions;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{

    enum col
    {
        ClaimStatusCode = 0,
        ServiceProviderIDQualifier,
        ServiceProviderID,
        TransactionDate,
        RxNumber,
        RefillNumber,
        FillDate,
        DispensedProductQualifier,
        DispensedProductID,
        PayerSequence,
        BIN,
        PCN,
        GroupNumber,
        InsurerCode,
        InsurerName,
        PlanCode,
        PlanName,
        PrescriberQualifier,
        PrescriberSubmittedID,
        PrescriberLastName,
        PrescriberFirstName,
        PrescriberStreetAddress,
        PrescriberCity,
        PrescriberStateCode,
        PrescriberZipCode,
        PrescriberPhoneNumber,
        OriginallyPrescribedProduct,
        PrescribedRefills,
        RxExpirationDate,
        DAW,
        DateWritten,
        OriginCode,
        CompoundCode,
        TotalQuantity,
        ContractCost,
        AverageWholeSalePrice,
        UsualAndCustomary,
        CopayAmountSubmitted,
        IngredientCostSubmitted,
        DispensingFeeSubmitted,
        IncentiveFeeSubmitted,
        SalesTaxSubmitted,
        CopayAmountPaid,
        IngredientCostPaid,
        DispensingFeePaid,
        SalesTaxPaid,
        IncentiveFeePaid,
        ClaimAmountPaid,
        BasisOfCostCode,
        QuantityDispensed,
        DaysSupply,
        PharmacistInitials,
        RejectMessageCount,
        RejectMessages,
        AuthorizationNumber,
        BasisOfReimbursementDetermination,
        PlaceOfService,
        ProviderIDQualifier,
        ProviderID,
        AdjustedContractCost,
        P340BCode,
        PrescriptionStatus,
        ProductSource,
        PMID,
        StoreRebate,
        OtherPayerAmountPaid,
        SIG,
        eVoucherAmountPaid,

        MaxCols
    };

    public override void PreExecute()
    {
        base.PreExecute();
        /*
          Add your code here for preprocessing or remove if not needed
        */
    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
    }


    private string left(string inString, int inInt)
    {
        inString = inString.Trim();

        if (inInt > inString.Length)
            inInt = inString.Length;

        return inString.Substring(0, inInt);
    }

    private void WriteError(DateTime dt, string fn, Int32 rc, string ErrRow, string ErrDesc)
    {

        ErrorOutBuffer.AddRow();
        ErrorOutBuffer.ErrorDateTime = dt;
        ErrorOutBuffer.FQNFileName = fn;
        ErrorOutBuffer.FileErrorRowNumber = rc;
        ErrorOutBuffer.ErrorData = ErrRow;
        ErrorOutBuffer.ErrorDescription = ErrDesc;

    }

    private bool NonPrintableChars(string inp)
    {
        //Regex reg = new Regex("[^A-Za-z0-9_]");
        Regex reg = new Regex("[\x00-\x1f]");
        return (reg.IsMatch(inp));
    }



    public override void CreateNewOutputRows()
    {
        //    /*
        //      Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
        //      For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        //    */

        string inpFileNameAndPath = Variables.varStagingFile.ToString();
        string inp;
        string[] x;
        char[] delimiterChars = {'|'};
        int MinCols = ((int)col.MaxCols) - 1;
        Int32 RowCount = -1;
        Int32 FileRowID = 0;
        string strfiledir;

        strfiledir = inpFileNameAndPath.ToString();
        
        using (StreamReader sr = new StreamReader(inpFileNameAndPath))
        { 
            while ((inp = sr.ReadLine()) != null)

            try
            {
                
                {
                    RowCount++;
                    FileRowID++;

                    //Get rid of double and greater white spaces
                    //inp = inp.Replace("  ", " ").Replace("   ", " ").Trim().ToString();

                    // Split the inp into the array;
                    x = inp.Split(delimiterChars);

                    // Check for errors.

                    // Non-printable characters
                    if (NonPrintableChars(inp.Replace("\t", "")) == true)
                    {
                        DateTime ErrorFileDate = DateTime.Now;

                        WriteError(ErrorFileDate, inpFileNameAndPath, RowCount, inp, "Nonprintable data found in the row.");
                        continue;
                    }


                    // Too few columns
                    if (x.GetLength(0) < MinCols)
                    {
                        DateTime ErrorFileDate = DateTime.Now;

                        WriteError(ErrorFileDate, inpFileNameAndPath, RowCount, inp, "Not enough columns in row");
                        continue;
                    }

                    //int DateKey = int.Parse(DateTime.Now.ToString("yyyyMMdd"));

                    {
                        //This will skip over the column name row
                        if (RowCount > 0)
                        {

                            // Map this to our output variables.
                            FDSOutBuffer.AddRow();

                            FDSOutBuffer.FileRowID = FileRowID;
                            FDSOutBuffer.ClaimStatusCode = left(x[(int)col.ClaimStatusCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.ServiceProviderIDQualifier = left(x[(int)col.ServiceProviderIDQualifier].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.ServiceProviderID = left(x[(int)col.ServiceProviderID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.TransactionDate = left(x[(int)col.TransactionDate].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.RxNumber = left(x[(int)col.RxNumber].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.RefillNumber = left(x[(int)col.RefillNumber].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.FillDate = left(x[(int)col.FillDate].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.DispensedProductQualifier = left(x[(int)col.DispensedProductQualifier].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.DispensedProductID = left(x[(int)col.DispensedProductID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PayerSequence = left(x[(int)col.PayerSequence].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.BIN = left(x[(int)col.BIN].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PCN = left(x[(int)col.PCN].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.GroupNumber = left(x[(int)col.GroupNumber].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.InsurerCode = left(x[(int)col.InsurerCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.InsurerName = left(x[(int)col.InsurerName].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PlanCode = left(x[(int)col.PlanCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PlanName = left(x[(int)col.PlanName].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberQualifier = left(x[(int)col.PrescriberQualifier].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberSubmittedID = left(x[(int)col.PrescriberSubmittedID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberLastName = left(x[(int)col.PrescriberLastName].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberFirstName = left(x[(int)col.PrescriberFirstName].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberStreetAddress = left(x[(int)col.PrescriberStreetAddress].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberCity = left(x[(int)col.PrescriberCity].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberStateCode = left(x[(int)col.PrescriberStateCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberZipCode = left(x[(int)col.PrescriberZipCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriberPhoneNumber = left(x[(int)col.PrescriberPhoneNumber].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.OriginallyPrescribedProduct = left(x[(int)col.OriginallyPrescribedProduct].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescribedRefills = left(x[(int)col.PrescribedRefills].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.RxExpirationDate = left(x[(int)col.RxExpirationDate].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.DAW = left(x[(int)col.DAW].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.DateWritten = left(x[(int)col.DateWritten].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.OriginCode = left(x[(int)col.OriginCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.CompoundCode = left(x[(int)col.CompoundCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.TotalQuantity = left(x[(int)col.TotalQuantity].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.ContractCost = left(x[(int)col.ContractCost].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.AverageWholeSalePrice = left(x[(int)col.AverageWholeSalePrice].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.UsualAndCustomary = left(x[(int)col.UsualAndCustomary].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.CopayAmountSubmitted = left(x[(int)col.CopayAmountSubmitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.IngredientCostSubmitted = left(x[(int)col.IngredientCostSubmitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.DispensingFeeSubmitted = left(x[(int)col.DispensingFeeSubmitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.IncentiveFeeSubmitted = left(x[(int)col.IncentiveFeeSubmitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.SalesTaxSubmitted = left(x[(int)col.SalesTaxSubmitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.CopayAmountPaid = left(x[(int)col.CopayAmountPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.IngredientCostPaid = left(x[(int)col.IngredientCostPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.DispensingFeePaid = left(x[(int)col.DispensingFeePaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.SalesTaxPaid = left(x[(int)col.SalesTaxPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.IncentiveFeePaid = left(x[(int)col.IncentiveFeePaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.ClaimAmountPaid = left(x[(int)col.ClaimAmountPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.BasisOfCostCode = left(x[(int)col.BasisOfCostCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.QuantityDispensed = left(x[(int)col.QuantityDispensed].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.DaysSupply = left(x[(int)col.DaysSupply].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PharmacistInitials = left(x[(int)col.PharmacistInitials].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.RejectMessageCount = left(x[(int)col.RejectMessageCount].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.RejectMessages = left(x[(int)col.RejectMessages].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.AuthorizationNumber = left(x[(int)col.AuthorizationNumber].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.BasisOfReimbursementDetermination = left(x[(int)col.BasisOfReimbursementDetermination].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PlaceOfService = left(x[(int)col.PlaceOfService].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.ProviderIDQualifier = left(x[(int)col.ProviderIDQualifier].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.ProviderID = left(x[(int)col.ProviderID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.AdjustedContractCost = left(x[(int)col.AdjustedContractCost].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.P340BCode = left(x[(int)col.P340BCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PrescriptionStatus = left(x[(int)col.PrescriptionStatus].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.ProductSource = left(x[(int)col.ProductSource].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.PMID = left(x[(int)col.PMID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.StoreRebate = left(x[(int)col.StoreRebate].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.OtherPayerAmountPaid = left(x[(int)col.OtherPayerAmountPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.SIG = left(x[(int)col.SIG].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.eVoucherAmountPaid = left(x[(int)col.eVoucherAmountPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            FDSOutBuffer.FileSource = strfiledir.ToString();
                            FDSOutBuffer.RowCreatedDate = DateTime.Now;
                           

                        }

                    }
                }
                
            }
          
            catch (Exception ex)

                    {

                      DateTime  ErrorFileDate = DateTime.Now;
                
                        WriteError(ErrorFileDate, inpFileNameAndPath, FileRowID, inp, ex.ToString());
                        continue;                    
                    
                    
                    }
            }

    }
}

]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class FDSOutBuffer: ScriptBuffer

{
    public FDSOutBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 RowID
    {
        set
        {
            this[0] = value;
        }
    }
    public bool RowID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 FileRowID
    {
        set
        {
            this[1] = value;
        }
    }
    public bool FileRowID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ClaimStatusCode
    {
        set
        {
            this[2] = value;
        }
    }
    public bool ClaimStatusCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ServiceProviderIDQualifier
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ServiceProviderIDQualifier_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ServiceProviderID
    {
        set
        {
            this[4] = value;
        }
    }
    public bool ServiceProviderID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TransactionDate
    {
        set
        {
            this[5] = value;
        }
    }
    public bool TransactionDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RxNumber
    {
        set
        {
            this[6] = value;
        }
    }
    public bool RxNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RefillNumber
    {
        set
        {
            this[7] = value;
        }
    }
    public bool RefillNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FillDate
    {
        set
        {
            this[8] = value;
        }
    }
    public bool FillDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DispensedProductQualifier
    {
        set
        {
            this[9] = value;
        }
    }
    public bool DispensedProductQualifier_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DispensedProductID
    {
        set
        {
            this[10] = value;
        }
    }
    public bool DispensedProductID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PayerSequence
    {
        set
        {
            this[11] = value;
        }
    }
    public bool PayerSequence_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String BIN
    {
        set
        {
            this[12] = value;
        }
    }
    public bool BIN_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PCN
    {
        set
        {
            this[13] = value;
        }
    }
    public bool PCN_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String GroupNumber
    {
        set
        {
            this[14] = value;
        }
    }
    public bool GroupNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String InsurerCode
    {
        set
        {
            this[15] = value;
        }
    }
    public bool InsurerCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String InsurerName
    {
        set
        {
            this[16] = value;
        }
    }
    public bool InsurerName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PlanCode
    {
        set
        {
            this[17] = value;
        }
    }
    public bool PlanCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PlanName
    {
        set
        {
            this[18] = value;
        }
    }
    public bool PlanName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberQualifier
    {
        set
        {
            this[19] = value;
        }
    }
    public bool PrescriberQualifier_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberSubmittedID
    {
        set
        {
            this[20] = value;
        }
    }
    public bool PrescriberSubmittedID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(20);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberLastName
    {
        set
        {
            this[21] = value;
        }
    }
    public bool PrescriberLastName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(21);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberFirstName
    {
        set
        {
            this[22] = value;
        }
    }
    public bool PrescriberFirstName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(22);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberStreetAddress
    {
        set
        {
            this[23] = value;
        }
    }
    public bool PrescriberStreetAddress_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(23);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberCity
    {
        set
        {
            this[24] = value;
        }
    }
    public bool PrescriberCity_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(24);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberStateCode
    {
        set
        {
            this[25] = value;
        }
    }
    public bool PrescriberStateCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(25);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberZipCode
    {
        set
        {
            this[26] = value;
        }
    }
    public bool PrescriberZipCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(26);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberPhoneNumber
    {
        set
        {
            this[27] = value;
        }
    }
    public bool PrescriberPhoneNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(27);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String OriginallyPrescribedProduct
    {
        set
        {
            this[28] = value;
        }
    }
    public bool OriginallyPrescribedProduct_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(28);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescribedRefills
    {
        set
        {
            this[29] = value;
        }
    }
    public bool PrescribedRefills_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(29);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RxExpirationDate
    {
        set
        {
            this[30] = value;
        }
    }
    public bool RxExpirationDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(30);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DAW
    {
        set
        {
            this[31] = value;
        }
    }
    public bool DAW_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(31);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DateWritten
    {
        set
        {
            this[32] = value;
        }
    }
    public bool DateWritten_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(32);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String OriginCode
    {
        set
        {
            this[33] = value;
        }
    }
    public bool OriginCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(33);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CompoundCode
    {
        set
        {
            this[34] = value;
        }
    }
    public bool CompoundCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(34);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TotalQuantity
    {
        set
        {
            this[35] = value;
        }
    }
    public bool TotalQuantity_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(35);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ContractCost
    {
        set
        {
            this[36] = value;
        }
    }
    public bool ContractCost_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(36);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String AverageWholeSalePrice
    {
        set
        {
            this[37] = value;
        }
    }
    public bool AverageWholeSalePrice_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(37);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String UsualAndCustomary
    {
        set
        {
            this[38] = value;
        }
    }
    public bool UsualAndCustomary_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(38);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CopayAmountSubmitted
    {
        set
        {
            this[39] = value;
        }
    }
    public bool CopayAmountSubmitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(39);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String IngredientCostSubmitted
    {
        set
        {
            this[40] = value;
        }
    }
    public bool IngredientCostSubmitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(40);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DispensingFeeSubmitted
    {
        set
        {
            this[41] = value;
        }
    }
    public bool DispensingFeeSubmitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(41);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String IncentiveFeeSubmitted
    {
        set
        {
            this[42] = value;
        }
    }
    public bool IncentiveFeeSubmitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(42);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SalesTaxSubmitted
    {
        set
        {
            this[43] = value;
        }
    }
    public bool SalesTaxSubmitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(43);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CopayAmountPaid
    {
        set
        {
            this[44] = value;
        }
    }
    public bool CopayAmountPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(44);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String IngredientCostPaid
    {
        set
        {
            this[45] = value;
        }
    }
    public bool IngredientCostPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(45);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DispensingFeePaid
    {
        set
        {
            this[46] = value;
        }
    }
    public bool DispensingFeePaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(46);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SalesTaxPaid
    {
        set
        {
            this[47] = value;
        }
    }
    public bool SalesTaxPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(47);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String IncentiveFeePaid
    {
        set
        {
            this[48] = value;
        }
    }
    public bool IncentiveFeePaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(48);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ClaimAmountPaid
    {
        set
        {
            this[49] = value;
        }
    }
    public bool ClaimAmountPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(49);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String BasisOfCostCode
    {
        set
        {
            this[50] = value;
        }
    }
    public bool BasisOfCostCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(50);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String QuantityDispensed
    {
        set
        {
            this[51] = value;
        }
    }
    public bool QuantityDispensed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(51);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DaysSupply
    {
        set
        {
            this[52] = value;
        }
    }
    public bool DaysSupply_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(52);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PharmacistInitials
    {
        set
        {
            this[53] = value;
        }
    }
    public bool PharmacistInitials_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(53);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RejectMessageCount
    {
        set
        {
            this[54] = value;
        }
    }
    public bool RejectMessageCount_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(54);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RejectMessages
    {
        set
        {
            this[55] = value;
        }
    }
    public bool RejectMessages_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(55);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String AuthorizationNumber
    {
        set
        {
            this[56] = value;
        }
    }
    public bool AuthorizationNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(56);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String BasisOfReimbursementDetermination
    {
        set
        {
            this[57] = value;
        }
    }
    public bool BasisOfReimbursementDetermination_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(57);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PlaceOfService
    {
        set
        {
            this[58] = value;
        }
    }
    public bool PlaceOfService_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(58);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ProviderIDQualifier
    {
        set
        {
            this[59] = value;
        }
    }
    public bool ProviderIDQualifier_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(59);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ProviderID
    {
        set
        {
            this[60] = value;
        }
    }
    public bool ProviderID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(60);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String AdjustedContractCost
    {
        set
        {
            this[61] = value;
        }
    }
    public bool AdjustedContractCost_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(61);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String P340BCode
    {
        set
        {
            this[62] = value;
        }
    }
    public bool P340BCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(62);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriptionStatus
    {
        set
        {
            this[63] = value;
        }
    }
    public bool PrescriptionStatus_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(63);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ProductSource
    {
        set
        {
            this[64] = value;
        }
    }
    public bool ProductSource_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(64);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PMID
    {
        set
        {
            this[65] = value;
        }
    }
    public bool PMID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(65);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FileSource
    {
        set
        {
            this[66] = value;
        }
    }
    public bool FileSource_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(66);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime RowCreatedDate
    {
        set
        {
            this[67] = value;
        }
    }
    public bool RowCreatedDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(67);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String StoreRebate
    {
        set
        {
            this[68] = value;
        }
    }
    public bool StoreRebate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(68);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String OtherPayerAmountPaid
    {
        set
        {
            this[69] = value;
        }
    }
    public bool OtherPayerAmountPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(69);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String SIG
    {
        set
        {
            this[70] = value;
        }
    }
    public bool SIG_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(70);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String eVoucherAmountPaid
    {
        set
        {
            this[71] = value;
        }
    }
    public bool eVoucherAmountPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(71);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ErrorOutBuffer: ScriptBuffer

{
    public ErrorOutBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public DateTime ErrorDateTime
    {
        set
        {
            this[0] = value;
        }
    }
    public bool ErrorDateTime_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FQNFileName
    {
        set
        {
            this[1] = value;
        }
    }
    public bool FQNFileName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 FileErrorRowNumber
    {
        set
        {
            this[2] = value;
        }
    }
    public bool FileErrorRowNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorData
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ErrorData_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorDescription
    {
        set
        {
            this[4] = value;
        }
    }
    public bool ErrorDescription_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime RowCreatedDate
    {
        set
        {
            this[5] = value;
        }
    }
    public bool RowCreatedDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Settings.get_Default():SC_0bf11d85736748cc88c918f84be77cc9.Properties.Sett" +
    "ings")]

namespace SC_0bf11d85736748cc88c918f84be77cc9.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0bf11d85736748cc88c918f84be77cc9.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{CDFD559B-3F9E-41CC-9DA7-3DF2DB7E84C7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_0bf11d85736748cc88c918f84be77cc9</RootNamespace>
    <AssemblyName>SC_0bf11d85736748cc88c918f84be77cc9</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_0bf11d85736748cc88c918f84be77cc9</msb:CodeName>
		<msb:DisplayName>SC_0bf11d85736748cc88c918f84be77cc9</msb:DisplayName>
		<msb:ProjectId>{B8D60173-8497-481D-9638-4082EFBCFF9A}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_0bf11d85736748cc88c918f84be77cc9.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_0bf11d85736748cc88c918f84be77cc9")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_0bf11d85736748cc88c918f84be77cc9")]
[assembly: AssemblyCopyright("Copyright @  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_0bf11d85736748cc88c918f84be77cc9.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0bf11d85736748cc88c918f84be77cc9.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
DZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8nAAAG
AnsDAAAEAggfDppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAo
AwAABm8pAAAGAnsDAAAEAggfD5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8X
AAAKIPQBAAAoAwAABm8rAAAGAnsDAAAEAggfEJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoA
AApvEgAACm8XAAAKIPQBAAAoAwAABm8tAAAGAnsDAAAEAggfEZpyjwAAcHKVAABwbxoAAApymQAA
cHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8vAAAGAnsDAAAEAggfEppyjwAAcHKVAABw
bxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8xAAAGAnsDAAAEAggfE5py
jwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8zAAAGAnsD
AAAEAggfFJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAA
Bm81AAAGAnsDAAAEAggfFZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAK
IPQBAAAoAwAABm83AAAGAnsDAAAEAggfFppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApv
EgAACm8XAAAKIPQBAAAoAwAABm85AAAGAnsDAAAEAggfF5pyjwAAcHKVAABwbxoAAApymQAAcHKV
AABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm87AAAGAnsDAAAEAggfGJpyjwAAcHKVAABwbxoA
AApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm89AAAGAnsDAAAEAggfGZpyjwAA
cHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8/AAAGAnsDAAAE
AggfGppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9B
AAAGAnsDAAAEAggfG5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQB
AAAoAwAABm9DAAAGAnsDAAAEAggfHJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAA
Cm8XAAAKIPQBAAAoAwAABm9FAAAGAnsDAAAEAggfHZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABw
bxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9HAAAGAnsDAAAEAggfHppyjwAAcHKVAABwbxoAAApy
mQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9JAAAGAnsDAAAEAggfH5pyjwAAcHKV
AABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9LAAAGAnsDAAAEAggf
IJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9NAAAG
AnsDAAAEAggfIZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAo
AwAABm9PAAAGAnsDAAAEAggfIppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8X
AAAKIPQBAAAoAwAABm9RAAAGAnsDAAAEAggfI5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoA
AApvEgAACm8XAAAKIPQBAAAoAwAABm9TAAAGAnsDAAAEAggfJJpyjwAAcHKVAABwbxoAAApymQAA
cHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9VAAAGAnsDAAAEAggfJZpyjwAAcHKVAABw
bxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9XAAAGAnsDAAAEAggfJppy
jwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9ZAAAGAnsD
AAAEAggfJ5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAA
Bm9bAAAGAnsDAAAEAggfKJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAK
IPQBAAAoAwAABm9dAAAGAnsDAAAEAggfKZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApv
EgAACm8XAAAKIPQBAAAoAwAABm9fAAAGAnsDAAAEAggfKppyjwAAcHKVAABwbxoAAApymQAAcHKV
AABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9hAAAGAnsDAAAEAggfK5pyjwAAcHKVAABwbxoA
AApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9jAAAGAnsDAAAEAggfLJpyjwAA
cHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9lAAAGAnsDAAAE
AggfLZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9n
AAAGAnsDAAAEAggfLppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQB
AAAoAwAABm9pAAAGAnsDAAAEAggfL5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAA
Cm8XAAAKIPQBAAAoAwAABm9rAAAGAnsDAAAEAggfMJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABw
bxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9tAAAGAnsDAAAEAggfMZpyjwAAcHKVAABwbxoAAApy
mQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9vAAAGAnsDAAAEAggfMppyjwAAcHKV
AABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9xAAAGAnsDAAAEAggf
M5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9zAAAG
AnsDAAAEAggfNJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAo
AwAABm91AAAGAnsDAAAEAggfNZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8X
AAAKIPQBAAAoAwAABm93AAAGAnsDAAAEAggfNppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoA
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
EAC3FAAAVQABAKwAAQAQAOYTAABZAAUAsQABABAAWhMAAFkABgCyAAAAEACwEh8TWQAHALQAAAEQ
AIkTHxNxAAkAuAADAQAAsg8AAEUACgC7AAYA5hMdAgYAWhMhAgYAjxElAgYAnBEpAgEAxRQtAgEA
xRQtAhEA2Q8xAhEAqgQ1AhEAzgI5AgYGGgE9AlaAjgNAAlaA2xFAAlaAowBAAlaAEwVAAlaAUhFA
AlaAAhFAAlaA8QRAAlaAEhJAAlaAuQBAAlaA4gJAAlaABAFAAlaA/ABAAlaAKxFAAlaAfgNAAlaA
FgRAAlaATANAAlaACQRAAlaA+hFAAlaAegBAAlaAJgRAAlaAPQRAAlaAEBRAAlaADBZAAlaANANA
AlaAaANAAlaA6BBAAlaAbBRAAlaArRNAAlaA/gRAAlaAFgFAAlaA6Q9AAlaAWQNAAlaAIwNAAlaA
HxZAAlaANhVAAlaApQJAAlaA9hVAAlaApwFAAlaAwAFAAlaAjAFAAlaAcgFAAlaA3AFAAlaAYQJA
AlaAdQJAAlaABwJAAlaAjAJAAlaA8gFAAlaAHQJAAlaAogNAAlaAXAFAAlaA5xVAAlaAlhNAAlaA
6RRAAlaAEBNAAlaAExFAAlaABxBAAlaAvwJAAlaA4hFAAlaAqgBAAlaALhVAAlaAFQNAAlaAOhRA
AlaAAwNAAlaAcQBAAlaAJwVAAlaASAJAAlaA9ABAAlaAMQJAAlaAvxNAAlAgAAAAAMYA5gYGAAEA
WCAAAAAAxgDxBgYAAQBgIAAAAACBAJoURAIBAIQgAAAAAIEAVBJKAgMA2iAAAAAAgQDyEykACADs
IAAAAADGAE0UBgAJANgzAAAAAIYYXxIGAAkA4DMAAAAAhhhfElwACQDrMwAAAACGCNgAAQAMAPoz
AAAAAIYIFghUAg0AETQAAAAAhgjiAAEADgAgNAAAAACGCCcIVAIPADc0AAAAAIYIigMQABAAQTQA
AAAAhghdC1QCEQBYNAAAAACGCNcREAASAGI0AAAAAIYIxw1UAhMAeTQAAAAAhgifABAAFACDNAAA
AACGCNsHVAIVAJo0AAAAAIYIDwUQABYApDQAAAAAhgh1DFQCFwC7NAAAAACGCE4REAAYAMU0AAAA
AIYIlA1UAhkA3DQAAAAAhgj+EBAAGgDmNAAAAACGCCgNVAIbAP00AAAAAIYI7QQQABwABzUAAAAA
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
SADnAAgATADsAAgAUADxAAgAVAD2AAgAWAD7AAgAXAAAAQgAYAAFAQgAZAAKAQgAaAAPAQgAbAAU
AQgAcAAZAQgAdAAeAQgAeAAjAQgAfAAoAQgAgAAtAQgAhAAyAQgAiAA3AQgAjAA8AQgAkABBAQgA
lABGAQgAmABLAQgAnABQAQgAoABVAQgApABaAQgAqABfAQgArABkAQgAsABpAQgAtABuAQgAuABz
AQgAvAB4AQgAwAB9AQgAxACCAQgAyACHAQgAzACMAQgA0ACRAQgA1ACWAQgA2ACbAQgA3ACgAQgA
4AClAQgA5ACqAQgA6ACvAQgA7AC0AQgA8AC5AQgA9AC+AQgA+ADDAQgA/ADIAQgAAAHNAQgABAHS
AQgACAHXAQgADAHcAQgAEAHhAQgAFAHmAQgAGAHrAQgAHAHwAQgAIAH1AQgAJAH6AQgAKAH/AQgA
LAEEAggAMAEJAggANAEOAggAOAETAggAPAEYAi4ACwCqAi4AEwCzAi4AGwDSAi4AIwDbAi4AKwAE
Ay4AMwAEAy4AOwAEAy4AQwDbAi4ASwAKAy4AUwAEAy4AWwAhA0MAYwDJAAMBawDJACEBewDJAMkT
cwDSAukTcwDSAi4AcAADAAEABACRAAcAnQAIAJ4ACQCgAAAA6gCKAgAALwiOAgAA5gCKAgAAKwiO
AgAAjgOSAgAAYQuOAgAA2xGSAgAAyw2OAgAAowCSAgAA3weOAgAAEwWSAgAAeQyOAgAAUhGSAgAA
mA2OAgAAAhGSAgAALA2OAgAA8QSSAgAASQyOAgAAEhKSAgAAEA6OAgAAuQCSAgAA/AeOAgAA4gKS
AgAAbwqOAgAABAGSAgAAXgiOAgAA/ACSAgAATwiOAgAAKxGSAgAAYw2OAgAAfgOSAgAASguOAgAA
FgSSAgAAwguOAgAATAOSAgAAAwuOAgAACQSSAgAArguOAgAA+hGSAgAA8Q2OAgAAegCSAgAAqAeO
AgAAJgSSAgAA2QuOAgAAPQSSAgAA9wuOAgAAEBSSAgAAig6OAgAADBaSAgAAew+OAgAANAOSAgAA
5AqOAgAAaAOSAgAALQuOAgAA6BCSAgAACw2OAgAAbBSSAgAAyw6OAgAArROSAgAAbQ6OAgAA/gSS
AgAAXQyOAgAAFgGSAgAAbQiOAgAA6Q+SAgAAqwyOAgAAWQOSAgAAFwuOAgAAIwOSAgAAzAqOAgAA
HxaSAgAAlQ+OAgAANhWSAgAAMA+OAgAApQKSAgAANAqOAgAA9hWSAgAAXg+OAgAApwGSAgAA8QiO
AgAAwAGSAgAAEQmOAgAAjAGSAgAAzwiOAgAAcgGSAgAArgiOAgAA3AGSAgAANAmOAgAAYQKSAgAA
4wmOAgAAdQKSAgAA/gmOAgAABwKSAgAAbQmOAgAAjAKSAgAAHAqOAgAA8gGSAgAAUQmOAgAAHQKS
AgAAigmOAgAAogOSAgAAfAuOAgAAXAGSAgAAkQiOAgAA5xWSAgAASA+OAgAAlhOSAgAATw6OAgAA
6RSSAgAA8g6OAgAAEBOSAgAANQ6OAgAAExGSAgAARA2OAgAABxCSAgAAwgyOAgAAvwKSAgAAVQqO
AgAA4hGSAgAA0g2OAgAAqgCSAgAA5geOAgAALhWSAgAAKA+OAgAAFQOSAgAAtwqOAgAAOhSSAgAA
rQ6OAgAAAwOSAgAAngqOAgAAcQCSAgAAmAeOAgAA9AKSAgAAiAqOAgAA3gSWAgAALwyOAgAAJwWS
AgAAlAyOAgAASAKSAgAAwwmOAgAA9ACSAgAAQAiOAgAAMQKSAgAApQmOAgAAVQSWAgAAFgyOAgAA
+QOSAgAAlwuOAgAAOxGKAgAAeg2OAgAAJgGSAgAAfAiOAgAAgxCSAgAA7wyOAgAA3gSWAgAALwyO
AgAA5gOSAgAArxGbAgAAsgSgAgAAqRSlAgEACQADAAEACgAFAAEACwAHAAEADAAJAAEADQALAAEA
DgANAAEADwAPAAEAEAARAAEAEQATAAEAEgAVAAEAEwAXAAEAFAAZAAEAFQAbAAEAFgAdAAEAFwAf
AAEAGAAhAAEAGQAjAAEAGgAlAAEAGwAnAAEAHAApAAEAHQArAAEAHgAtAAEAHwAvAAEAIAAxAAEA
IQAzAAEAIgA1AAEAIwA3AAEAJAA5AAEAJQA7AAEAJgA9AAEAJwA/AAEAKABBAAEAKQBDAAEAKgBF
AAEAKwBHAAEALABJAAEALQBLAAEALgBNAAEALwBPAAEAMABRAAEAMQBTAAEAMgBVAAEAMwBXAAEA
NABZAAEANQBbAAEANgBdAAEANwBfAAEAOABhAAEAOQBjAAEAOgBlAAEAOwBnAAEAPABpAAEAPQBr
AAEAPgBtAAEAPwBvAAEAQABxAAEAQQBzAAEAQgB1AAEAQwB3AAEARAB5AAEARQB7AAEARgB9AAEA
RwB/AAEASACBAAEASQCDAAEASgCFAAEASwCHAAEATACJAAEATQCLAAEATgCNAAEATwCPAAEAUACR
AAEAUQCTAAEAUgCVAAEAUwCXAAEAVACZAAEAVQCbAAEAVgCdAAEAVwCfAAEAWAChAAEAWQCjAAEA
WgClAAEAWwCnAAEAXACpAAEAXQCrAAEAXgCtAAEAXwCvAAEAYACxAAEAYQCzAAEAYgC1AAEAYwC3
AAEAZAC5AAEAZQC7AAEAZgC9AAEAZwC/AAEAaADBAAEAaQDDAAEAagDFAAEAawDHAAEAbADJAAEA
bQDLAAEAbgDNAAEAbwDPAAEAcADRAAEAcQDTAAEAcgDVAAEAcwDXAAEAdADZAAEAdQDbAAEAdgDd
AAEAdwDfAAEAeADhAAEAeQDjAAEAegDlAAEAewDnAAEAfADpAAEAfQDrAAEAfgDtAAEAfwDvAAEA
gADxAAEAgQDzAAEAggD1AAEAgwD3AAEAhAD5AAEAhQD7AAEAhgD9AAEAhwD/AAEAiAABAQEAiQAD
AQEAigAFAQEAiwAHAQEAjAAJAQEAjQALAQEAjgANAQEAjwAPAQEAkAARAQEAkQATAQEAkgAVAQEA
kwAXAQEAlAAZAQEAlQAbAQEAlgAdAQEAlwAfAQEAmAAhAQEAnQAjAQEAngAlAQEAnwAnAQEAoAAp
AQEAoQArAQEAogAtAQEAowAvAQEApAAxAQEApQAzAQEApgA1AQEApwA3AQEAqAA5AQIAswA7AQIA
tQA9AQIAtgA/AQEAtwA/AQIAuABBAQSAAAABAAAAAAAAAAAAAAAAAEAAAAAEAAAAAAAAAAAAAACy
ADABAAAAAA0AAAAAAAAAAAAAALsA/BQAAAAADQAAAAAAAAAAAAAAuwBDFQAAAAAEAAAAAAAAAAAA
AACyAMgPAAAAAA0AAAAAAAAAAAAAALsAuBAAAAAAAAAAAAEAAAC6EgAACgACAAAAAElEVFNWYXJp
YWJsZTEwMABJRFRTVmFyaWFibGVzMTAwAElEVFNFdmFsdWF0b3JDb250ZXh0MTAwAEludDMyAFND
XzBiZjExZDg1NzM2NzQ4Y2M4OGM5MThmODRiZTc3Y2M5ADxNb2R1bGU+AHNldF9QTUlEAHNldF9Q
cmVzY3JpYmVyU3VibWl0dGVkSUQAc2V0X1Byb3ZpZGVySUQAc2V0X1NlcnZpY2VQcm92aWRlcklE
AHNldF9EaXNwZW5zZWRQcm9kdWN0SUQAR2V0T3V0cHV0SUQAc2V0X1Jvd0lEAHNldF9GaWxlUm93
SUQAc2V0X1NJRwBzZXRfUENOAHNldF9CSU4AU3lzdGVtLklPAHNldF9EQVcAdmFsdWVfXwBzZXRf
RXJyb3JEYXRhAG1zY29ybGliAHJjAEVyckRlc2MATWFya091dHB1dHNGaW5pc2hlZABzZXRfUXVh
bnRpdHlEaXNwZW5zZWQAc2V0X0luY2VudGl2ZUZlZVN1Ym1pdHRlZABzZXRfRGlzcGVuc2luZ0Zl
ZVN1Ym1pdHRlZABzZXRfQ29wYXlBbW91bnRTdWJtaXR0ZWQAc2V0X0luZ3JlZGllbnRDb3N0U3Vi
bWl0dGVkAHNldF9TYWxlc1RheFN1Ym1pdHRlZABzZXRfSW5jZW50aXZlRmVlUGFpZABzZXRfRGlz
cGVuc2luZ0ZlZVBhaWQAc2V0X0NsYWltQW1vdW50UGFpZABzZXRfZVZvdWNoZXJBbW91bnRQYWlk
AHNldF9PdGhlclBheWVyQW1vdW50UGFpZABzZXRfQ29wYXlBbW91bnRQYWlkAHNldF9JbmdyZWRp
ZW50Q29zdFBhaWQAc2V0X1NhbGVzVGF4UGFpZABSZXBsYWNlAHNldF9BdmVyYWdlV2hvbGVTYWxl
UHJpY2UAc2V0X1BsYWNlT2ZTZXJ2aWNlAGRlZmF1bHRJbnN0YW5jZQBzZXRfUGF5ZXJTZXF1ZW5j
ZQBzZXRfRmlsZVNvdXJjZQBzZXRfUHJvZHVjdFNvdXJjZQBzZXRfUDM0MEJDb2RlAHNldF9Db21w
b3VuZENvZGUAc2V0X1ByZXNjcmliZXJTdGF0ZUNvZGUAc2V0X1BsYW5Db2RlAHNldF9PcmlnaW5D
b2RlAHNldF9QcmVzY3JpYmVyWmlwQ29kZQBzZXRfSW5zdXJlckNvZGUAc2V0X0NsYWltU3RhdHVz
Q29kZQBzZXRfQmFzaXNPZkNvc3RDb2RlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdl
dFR5cGVGcm9tSGFuZGxlAGdldF92YXJTdGFnaW5nRmlsZQBzZXRfRlFORmlsZU5hbWUAc2V0X1Bs
YW5OYW1lAHNldF9JbnN1cmVyTmFtZQBzZXRfUHJlc2NyaWJlckxhc3ROYW1lAHNldF9QcmVzY3Jp
YmVyRmlyc3ROYW1lAHNldF9FcnJvckRhdGVUaW1lAFJlYWRMaW5lAE1pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlBpcGVsaW5lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0
dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAERpc3Bvc2UAc2V0X1Jvd0NyZWF0ZWREYXRlAHNl
dF9GaWxsRGF0ZQBzZXRfUnhFeHBpcmF0aW9uRGF0ZQBzZXRfVHJhbnNhY3Rpb25EYXRlAHNldF9T
dG9yZVJlYmF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0
ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9y
QnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1h
cmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlv
bkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhh
dGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0
QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5
Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRl
AFBvc3RFeGVjdXRlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAaW5TdHJpbmcAVG9T
dHJpbmcAU3Vic3RyaW5nAElzTWF0Y2gAZ2V0X0xlbmd0aABHZXRMZW5ndGgAU3lzdGVtLkNvbXBv
bmVudE1vZGVsAFNDXzBiZjExZDg1NzM2NzQ4Y2M4OGM5MThmODRiZTc3Y2M5LmRsbABzZXRfUE1J
RF9Jc051bGwAc2V0X1ByZXNjcmliZXJTdWJtaXR0ZWRJRF9Jc051bGwAc2V0X1Byb3ZpZGVySURf
SXNOdWxsAHNldF9TZXJ2aWNlUHJvdmlkZXJJRF9Jc051bGwAc2V0X0Rpc3BlbnNlZFByb2R1Y3RJ
RF9Jc051bGwAc2V0X1Jvd0lEX0lzTnVsbABzZXRfRmlsZVJvd0lEX0lzTnVsbABzZXRfU0lHX0lz
TnVsbABzZXRfUENOX0lzTnVsbABzZXRfQklOX0lzTnVsbABzZXRfREFXX0lzTnVsbABzZXRfRXJy
b3JEYXRhX0lzTnVsbABzZXRfUXVhbnRpdHlEaXNwZW5zZWRfSXNOdWxsAHNldF9JbmNlbnRpdmVG
ZWVTdWJtaXR0ZWRfSXNOdWxsAHNldF9EaXNwZW5zaW5nRmVlU3VibWl0dGVkX0lzTnVsbABzZXRf
Q29wYXlBbW91bnRTdWJtaXR0ZWRfSXNOdWxsAHNldF9JbmdyZWRpZW50Q29zdFN1Ym1pdHRlZF9J
c051bGwAc2V0X1NhbGVzVGF4U3VibWl0dGVkX0lzTnVsbABzZXRfSW5jZW50aXZlRmVlUGFpZF9J
c051bGwAc2V0X0Rpc3BlbnNpbmdGZWVQYWlkX0lzTnVsbABzZXRfQ2xhaW1BbW91bnRQYWlkX0lz
TnVsbABzZXRfZVZvdWNoZXJBbW91bnRQYWlkX0lzTnVsbABzZXRfT3RoZXJQYXllckFtb3VudFBh
aWRfSXNOdWxsAHNldF9Db3BheUFtb3VudFBhaWRfSXNOdWxsAHNldF9JbmdyZWRpZW50Q29zdFBh
aWRfSXNOdWxsAHNldF9TYWxlc1RheFBhaWRfSXNOdWxsAHNldF9BdmVyYWdlV2hvbGVTYWxlUHJp
Y2VfSXNOdWxsAHNldF9QbGFjZU9mU2VydmljZV9Jc051bGwAc2V0X1BheWVyU2VxdWVuY2VfSXNO
dWxsAHNldF9GaWxlU291cmNlX0lzTnVsbABzZXRfUHJvZHVjdFNvdXJjZV9Jc051bGwAc2V0X1Az
NDBCQ29kZV9Jc051bGwAc2V0X0NvbXBvdW5kQ29kZV9Jc051bGwAc2V0X1ByZXNjcmliZXJTdGF0
ZUNvZGVfSXNOdWxsAHNldF9QbGFuQ29kZV9Jc051bGwAc2V0X09yaWdpbkNvZGVfSXNOdWxsAHNl
dF9QcmVzY3JpYmVyWmlwQ29kZV9Jc051bGwAc2V0X0luc3VyZXJDb2RlX0lzTnVsbABzZXRfQ2xh
aW1TdGF0dXNDb2RlX0lzTnVsbABzZXRfQmFzaXNPZkNvc3RDb2RlX0lzTnVsbABzZXRfRlFORmls
ZU5hbWVfSXNOdWxsAHNldF9QbGFuTmFtZV9Jc051bGwAc2V0X0luc3VyZXJOYW1lX0lzTnVsbABz
ZXRfUHJlc2NyaWJlckxhc3ROYW1lX0lzTnVsbABzZXRfUHJlc2NyaWJlckZpcnN0TmFtZV9Jc051
bGwAc2V0X0Vycm9yRGF0ZVRpbWVfSXNOdWxsAHNldF9Sb3dDcmVhdGVkRGF0ZV9Jc051bGwAc2V0
X0ZpbGxEYXRlX0lzTnVsbABzZXRfUnhFeHBpcmF0aW9uRGF0ZV9Jc051bGwAc2V0X1RyYW5zYWN0
aW9uRGF0ZV9Jc051bGwAc2V0X1N0b3JlUmViYXRlX0lzTnVsbABzZXRfRGF0ZVdyaXR0ZW5fSXNO
dWxsAHNldF9CYXNpc09mUmVpbWJ1cnNlbWVudERldGVybWluYXRpb25fSXNOdWxsAHNldF9FcnJv
ckRlc2NyaXB0aW9uX0lzTnVsbABzZXRfUHJlc2NyaWJlclBob25lTnVtYmVyX0lzTnVsbABzZXRf
UmVmaWxsTnVtYmVyX0lzTnVsbABzZXRfQXV0aG9yaXphdGlvbk51bWJlcl9Jc051bGwAc2V0X0dy
b3VwTnVtYmVyX0lzTnVsbABzZXRfRmlsZUVycm9yUm93TnVtYmVyX0lzTnVsbABzZXRfUnhOdW1i
ZXJfSXNOdWxsAHNldF9Qcm92aWRlcklEUXVhbGlmaWVyX0lzTnVsbABzZXRfU2VydmljZVByb3Zp
ZGVySURRdWFsaWZpZXJfSXNOdWxsAHNldF9QcmVzY3JpYmVyUXVhbGlmaWVyX0lzTnVsbABzZXRf
RGlzcGVuc2VkUHJvZHVjdFF1YWxpZmllcl9Jc051bGwAc2V0X1JlamVjdE1lc3NhZ2VzX0lzTnVs
bABzZXRfUGhhcm1hY2lzdEluaXRpYWxzX0lzTnVsbABzZXRfUHJlc2NyaWJlZFJlZmlsbHNfSXNO
dWxsAHNldF9QcmVzY3JpYmVyU3RyZWV0QWRkcmVzc19Jc051bGwAc2V0X1ByZXNjcmlwdGlvblN0
YXR1c19Jc051bGwAc2V0X09yaWdpbmFsbHlQcmVzY3JpYmVkUHJvZHVjdF9Jc051bGwAc2V0X1Jl
amVjdE1lc3NhZ2VDb3VudF9Jc051bGwAc2V0X0NvbnRyYWN0Q29zdF9Jc051bGwAc2V0X0FkanVz
dGVkQ29udHJhY3RDb3N0X0lzTnVsbABzZXRfRGF5c1N1cHBseV9Jc051bGwAc2V0X1VzdWFsQW5k
Q3VzdG9tYXJ5X0lzTnVsbABzZXRfUHJlc2NyaWJlckNpdHlfSXNOdWxsAHNldF9Ub3RhbFF1YW50
aXR5X0lzTnVsbABTZXROdWxsAGNvbABnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVt
AHJlc291cmNlTWFuAHNldF9EYXRlV3JpdHRlbgBmbgBTY3JpcHRNYWluAHNldF9CYXNpc09mUmVp
bWJ1cnNlbWVudERldGVybWluYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2Jh
bGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBzZXRf
RXJyb3JEZXNjcmlwdGlvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABNaWNy
b3NvZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAGlucABDaGFyAHNldF9QcmVzY3JpYmVyUGhv
bmVOdW1iZXIAc2V0X1JlZmlsbE51bWJlcgBzZXRfQXV0aG9yaXphdGlvbk51bWJlcgBzZXRfR3Jv
dXBOdW1iZXIAc2V0X0ZpbGVFcnJvclJvd051bWJlcgBzZXRfUnhOdW1iZXIAU3RyZWFtUmVhZGVy
AFRleHRSZWFkZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0QnVmZmVyAEZEU091dEJ1ZmZlcgBFcnJv
ck91dEJ1ZmZlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAHNldF9Qcm92aWRlcklEUXVhbGlmaWVyAHNl
dF9TZXJ2aWNlUHJvdmlkZXJJRFF1YWxpZmllcgBzZXRfUHJlc2NyaWJlclF1YWxpZmllcgBzZXRf
RGlzcGVuc2VkUHJvZHVjdFF1YWxpZmllcgBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1l
LldyYXBwZXIAV3JpdGVFcnJvcgAuY3RvcgAuY2N0b3IAT3V0cHV0SURzAFN5c3RlbS5EaWFnbm9z
dGljcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0Nf
MGJmMTFkODU3MzY3NDhjYzg4YzkxOGY4NGJlNzdjYzkuUHJvcGVydGllcy5SZXNvdXJjZXMucmVz
b3VyY2VzAERlYnVnZ2luZ01vZGVzAHNldF9SZWplY3RNZXNzYWdlcwBTQ18wYmYxMWQ4NTczNjc0
OGNjODhjOTE4Zjg0YmU3N2NjOS5Qcm9wZXJ0aWVzAGdldF9SZWFkT25seVZhcmlhYmxlcwBCdWZm
ZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0dGluZ3MAc2V0X1BoYXJtYWNpc3RJ
bml0aWFscwBzZXRfUHJlc2NyaWJlZFJlZmlsbHMATWF4Q29scwBTeXN0ZW0uVGV4dC5SZWd1bGFy
RXhwcmVzc2lvbnMAQ29ubmVjdGlvbnMATm9uUHJpbnRhYmxlQ2hhcnMAQnVmZmVycwBzZXRfUHJl
c2NyaWJlclN0cmVldEFkZHJlc3MARmluaXNoT3V0cHV0cwBzZXRfUHJlc2NyaXB0aW9uU3RhdHVz
AENyZWF0ZU5ld091dHB1dFJvd3MAT2JqZWN0AHNldF9PcmlnaW5hbGx5UHJlc2NyaWJlZFByb2R1
Y3QAZHQAU2V0RW5kT2ZSb3dzZXQAbGVmdABTcGxpdABnZXRfRGVmYXVsdABpbkludABVc2VyQ29t
cG9uZW50AFBhcmVudENvbXBvbmVudABTY3JpcHRDb21wb25lbnQAc2V0X1JlamVjdE1lc3NhZ2VD
b3VudABNaWNyb3NvZnQuU3FsU2VydmVyLlR4U2NyaXB0AHNldF9Db250cmFjdENvc3QAc2V0X0Fk
anVzdGVkQ29udHJhY3RDb3N0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuUGlwZWxpbmVIb3N0AFByaW1l
T3V0cHV0AEdldFZhbHVlV2l0aENvbnRleHQAU2NyaXB0Q29tcG9uZW50RXZhbENvbnRleHQAZ2V0
X0V2YWx1YXRvckNvbnRleHQAZ2V0X05vdwBBZGRSb3cARXJyUm93AFJlZ2V4AEFycmF5AGdldF9B
c3NlbWJseQBzZXRfRGF5c1N1cHBseQBzZXRfVXN1YWxBbmRDdXN0b21hcnkAc2V0X1ByZXNjcmli
ZXJDaXR5AHNldF9Ub3RhbFF1YW50aXR5AAAAAAALWwAAAC0AHwBdAAEDCQAAAQBHTgBvAG4AcABy
AGkAbgB0AGEAYgBsAGUAIABkAGEAdABhACAAZgBvAHUAbgBkACAAaQBuACAAdABoAGUAIAByAG8A
dwAuAAAzTgBvAHQAIABlAG4AbwB1AGcAaAAgAGMAbwBsAHUAbQBuAHMAIABpAG4AIAByAG8AdwAA
BSAAIAAAAyAAAAcgACAAIAAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAAZQByAHQAeQAgAGMAYQBu
AG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAgAEEAcwBzAGkAZwBuACAA
YQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4AIABpAG4AcwB0AGUAYQBk
AC4AAA1GAEQAUwBPAHUAdAAAEUUAcgByAG8AcgBPAHUAdAAAHXYAYQByAFMAdABhAGcAaQBuAGcA
RgBpAGwAZQAAcVMAQwBfADAAYgBmADEAMQBkADgANQA3ADMANgA3ADQAOABjAGMAOAA4AGMAOQAx
ADgAZgA4ADQAYgBlADcANwBjAGMAOQAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUA
cgBjAGUAcwAAAABxjlf/QK49SL/hif8lZdoVAAQgAQEIAyAAAQUgAQEREQQgAQEOBSABARFpAyAA
DgMgAAgFIAIOCAgEIAECDhYHDQ4OHQ4dAwgICA4SPRE5ETkSQRE5BiABHQ4dAwUgAg4ODgQAABE5
BCABCAgJIAMBEk0dCBJRBSACAQgcAyAAAgMHAQgGAAIIElEOBSABHQgIBSAAEoCZBiABEoCdHAUA
ABKAoQYgARwSgKUIAAESgKkRgK0FIAASgLEHIAIBDhKAsQi3elxWGTTgiQiJhF3NgIDMkQQAAAAA
BAEAAAAEAgAAAAQDAAAABAQAAAAEBQAAAAQGAAAABAcAAAAECAAAAAQJAAAABAoAAAAECwAAAAQM
AAAABA0AAAAEDgAAAAQPAAAABBAAAAAEEQAAAAQSAAAABBMAAAAEFAAAAAQVAAAABBYAAAAEFwAA
AAQYAAAABBkAAAAEGgAAAAQbAAAABBwAAAAEHQAAAAQeAAAABB8AAAAEIAAAAAQhAAAABCIAAAAE
IwAAAAQkAAAABCUAAAAEJgAAAAQnAAAABCgAAAAEKQAAAAQqAAAABCsAAAAELAAAAAQtAAAABC4A
AAAELwAAAAQwAAAABDEAAAAEMgAAAAQzAAAABDQAAAAENQAAAAQ2AAAABDcAAAAEOAAAAAQ5AAAA
BDoAAAAEOwAAAAQ8AAAABD0AAAAEPgAAAAQ/AAAABEAAAAAEQQAAAARCAAAABEMAAAAERAAAAAMG
EhgDBhIcAwYSDAMGEhADBhJVAwYSYQMGEmUDBhIkAgYIAwYRKAUgAg4OCAkgBQEROQ4IDg4EIAEB
AgUgAQEROQsgBAEIHQgdEk0SUQUgAQESVQQAABJhBAAAEmUFAAEBEmUEAAASJAMAAAEDKAAIAygA
AgMoAA4EKAAROQQIABJhBAgAEmUECAASJAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv
blRocm93cwEIAQACAAAAAAAoAQAjU0NfMGJmMTFkODU3MzY3NDhjYzg4YzkxOGY4NGJlNzdjYzkA
AAUBAAAAABYBABFDb3B5cmlnaHQgQCAgMjAxNwAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12
NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0AAAAtAAAAM7K774B
AAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lv
bj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUw
ODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQ
tAAAAOh5AAAAAAAAAAAAAAJ6AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD0eQAAAAAAAAAAAAAA
AF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAA
gAAAAAAAAAAAAAAAAAAAAQAAAAAASAAAAFiAAADsAwAAAAAAAAAAAADsAzQAAABWAFMAXwBWAEUA
UgBTAEkATwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEAAAAAAAAAAQAAAAAAPwAAAAAAAAAE
AAAAAgAAAAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAA
VAByAGEAbgBzAGwAYQB0AGkAbwBuAAAAAAAAALAETAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJ
AG4AZgBvAAAAKAMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAA
AAAAACIAAQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABl
AHMAYwByAGkAcAB0AGkAbwBuAAAAAABTAEMAXwAwAGIAZgAxADEAZAA4ADUANwAzADYANwA0ADgA
YwBjADgAOABjADkAMQA4AGYAOAA0AGIAZQA3ADcAYwBjADkAAAAwAAgAAQBGAGkAbABlAFYAZQBy
AHMAaQBvAG4AAAAAADEALgAwAC4AMAAuADAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0A
ZQAAAFMAQwBfADAAYgBmADEAMQBkADgANQA3ADMANgA3ADQAOABjAGMAOAA4AGMAOQAxADgAZgA4
ADQAYgBlADcANwBjAGMAOQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcA
aAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA3AAAAKgABAAEATABlAGcAYQBs
AFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwA
ZQBuAGEAbQBlAAAAUwBDAF8AMABiAGYAMQAxAGQAOAA1ADcAMwA2ADcANAA4AGMAYwA4ADgAYwA5
ADEAOABmADgANABiAGUANwA3AGMAYwA5AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4A
YQBtAGUAAAAAAFMAQwBfADAAYgBmADEAMQBkADgANQA3ADMANgA3ADQAOABjAGMAOAA4AGMAOQAx
ADgAZgA4ADQAYgBlADcANwBjAGMAOQAAADQACAABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8A
bgAAADEALgAwAC4AMAAuADAAAAA4AAgAAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBu
AAAAMQAuADAALgAwAC4AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAABwAAAMAAAAFDoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAA]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_0bf11d85736748cc88c918f84be77cc9</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::varStagingFile</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">776349741e0ba1db027318c2b4906bda</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">09bc460447254ffeef75d857bef4578a4442d35c</property>
                  </properties>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut]"
                      hasSideEffects="true"
                      name="FDSOut">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RowID]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RowID]"
                          name="RowID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FileRowID]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FileRowID]"
                          name="FileRowID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ClaimStatusCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ClaimStatusCode]"
                          name="ClaimStatusCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ServiceProviderIDQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ServiceProviderIDQualifier]"
                          name="ServiceProviderIDQualifier" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ServiceProviderID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ServiceProviderID]"
                          name="ServiceProviderID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TransactionDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TransactionDate]"
                          name="TransactionDate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RxNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RxNumber]"
                          name="RxNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RefillNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RefillNumber]"
                          name="RefillNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FillDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FillDate]"
                          name="FillDate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensedProductQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensedProductQualifier]"
                          name="DispensedProductQualifier" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensedProductID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensedProductID]"
                          name="DispensedProductID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PayerSequence]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PayerSequence]"
                          name="PayerSequence" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BIN]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BIN]"
                          name="BIN" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PCN]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PCN]"
                          name="PCN" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[GroupNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[GroupNumber]"
                          name="GroupNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[InsurerCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[InsurerCode]"
                          name="InsurerCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[InsurerName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[InsurerName]"
                          name="InsurerName" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlanCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlanCode]"
                          name="PlanCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlanName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlanName]"
                          name="PlanName" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberQualifier]"
                          name="PrescriberQualifier" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberSubmittedID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberSubmittedID]"
                          name="PrescriberSubmittedID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberLastName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberLastName]"
                          name="PrescriberLastName" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberFirstName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberFirstName]"
                          name="PrescriberFirstName" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberStreetAddress]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberStreetAddress]"
                          name="PrescriberStreetAddress" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberCity]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberCity]"
                          name="PrescriberCity" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberStateCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberStateCode]"
                          name="PrescriberStateCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberZipCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberZipCode]"
                          name="PrescriberZipCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberPhoneNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriberPhoneNumber]"
                          name="PrescriberPhoneNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OriginallyPrescribedProduct]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OriginallyPrescribedProduct]"
                          name="OriginallyPrescribedProduct" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescribedRefills]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescribedRefills]"
                          name="PrescribedRefills" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RxExpirationDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RxExpirationDate]"
                          name="RxExpirationDate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DAW]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DAW]"
                          name="DAW" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DateWritten]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DateWritten]"
                          name="DateWritten" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OriginCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OriginCode]"
                          name="OriginCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CompoundCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CompoundCode]"
                          name="CompoundCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TotalQuantity]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[TotalQuantity]"
                          name="TotalQuantity" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ContractCost]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ContractCost]"
                          name="ContractCost" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AverageWholeSalePrice]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AverageWholeSalePrice]"
                          name="AverageWholeSalePrice" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[UsualAndCustomary]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[UsualAndCustomary]"
                          name="UsualAndCustomary" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CopayAmountSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CopayAmountSubmitted]"
                          name="CopayAmountSubmitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IngredientCostSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IngredientCostSubmitted]"
                          name="IngredientCostSubmitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensingFeeSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensingFeeSubmitted]"
                          name="DispensingFeeSubmitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IncentiveFeeSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IncentiveFeeSubmitted]"
                          name="IncentiveFeeSubmitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SalesTaxSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SalesTaxSubmitted]"
                          name="SalesTaxSubmitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CopayAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[CopayAmountPaid]"
                          name="CopayAmountPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IngredientCostPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IngredientCostPaid]"
                          name="IngredientCostPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensingFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DispensingFeePaid]"
                          name="DispensingFeePaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SalesTaxPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SalesTaxPaid]"
                          name="SalesTaxPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IncentiveFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[IncentiveFeePaid]"
                          name="IncentiveFeePaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ClaimAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ClaimAmountPaid]"
                          name="ClaimAmountPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BasisOfCostCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BasisOfCostCode]"
                          name="BasisOfCostCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[QuantityDispensed]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[QuantityDispensed]"
                          name="QuantityDispensed" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DaysSupply]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[DaysSupply]"
                          name="DaysSupply" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PharmacistInitials]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PharmacistInitials]"
                          name="PharmacistInitials" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RejectMessageCount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RejectMessageCount]"
                          name="RejectMessageCount" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RejectMessages]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RejectMessages]"
                          name="RejectMessages" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AuthorizationNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AuthorizationNumber]"
                          name="AuthorizationNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BasisOfReimbursementDetermination]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[BasisOfReimbursementDetermination]"
                          name="BasisOfReimbursementDetermination" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlaceOfService]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PlaceOfService]"
                          name="PlaceOfService" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProviderIDQualifier]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProviderIDQualifier]"
                          name="ProviderIDQualifier" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProviderID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProviderID]"
                          name="ProviderID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AdjustedContractCost]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[AdjustedContractCost]"
                          name="AdjustedContractCost" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[P340BCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[P340BCode]"
                          name="P340BCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriptionStatus]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PrescriptionStatus]"
                          name="PrescriptionStatus" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProductSource]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[ProductSource]"
                          name="ProductSource" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PMID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[PMID]"
                          name="PMID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FileSource]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[FileSource]"
                          name="FileSource" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[RowCreatedDate]"
                          name="RowCreatedDate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[StoreRebate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[StoreRebate]"
                          name="StoreRebate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OtherPayerAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[OtherPayerAmountPaid]"
                          name="OtherPayerAmountPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SIG]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[SIG]"
                          name="SIG" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[eVoucherAmountPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut].Columns[eVoucherAmountPaid]"
                          name="eVoucherAmountPaid" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut]"
                      hasSideEffects="true"
                      name="ErrorOut">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDateTime]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDateTime]"
                          name="ErrorDateTime" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FQNFileName]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FQNFileName]"
                          name="FQNFileName" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FileErrorRowNumber]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FileErrorRowNumber]"
                          name="FileErrorRowNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorData]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorData]"
                          name="ErrorData" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDescription]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDescription]"
                          name="ErrorDescription" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[RowCreatedDate]"
                          name="RowCreatedDate" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach Loop Container\Parse and load file.Paths[Derived Column Output]"
                  endId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Inputs[Conditional Split Input]"
                  name="Derived Column Output"
                  startId="Package\Foreach Loop Container\Parse and load file\Derived Column.Outputs[Derived Column Output]" />
                <path
                  refId="Package\Foreach Loop Container\Parse and load file.Paths[ErrorOut]"
                  endId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input]"
                  name="ErrorOut"
                  startId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut]" />
                <path
                  refId="Package\Foreach Loop Container\Parse and load file.Paths[FDSOut]"
                  endId="Package\Foreach Loop Container\Parse and load file\Derived Column.Inputs[Derived Column Input]"
                  name="FDSOut"
                  startId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[FDSOut]" />
                <path
                  refId="Package\Foreach Loop Container\Parse and load file.Paths[GoodDateKey]"
                  endId="Package\Foreach Loop Container\Parse and load file\DW1.Inputs[OLE DB Destination Input]"
                  name="GoodDateKey"
                  startId="Package\Foreach Loop Container\Parse and load file\Conditional Split.Outputs[GoodDateKey]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{CF5C8306-9C74-4655-B153-92F0FB2CEEDB}"
          DTS:From="Package\Foreach Loop Container\Parse and load file"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\Delete file" />
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 1]"
          DTS:CreationName=""
          DTS:DTSID="{1C187FDB-70A3-435A-BADE-6868DDA4CC6E}"
          DTS:From="Package\Foreach Loop Container\Date Variable to Load"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint 1"
          DTS:To="Package\Foreach Loop Container\Parse and load file" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{266928A7-F1CC-44EC-8F55-9E81F07EDF7D}"
          DTS:ObjectName="{266928A7-F1CC-44EC-8F55-9E81F07EDF7D}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::varStagingFile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get file Names for Loop"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{988D6C8F-A1FA-4F81-B4D7-FBDE08B6464F}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get file Names for Loop"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Get file Names for Loop\OLE DB Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">EXEC dbo.usp_FDS_FileConfig</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Get file Names for Loop\OLE DB Source.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                  connectionManagerRefId="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].Columns[SourcePath]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[SourcePath]"
                      length="500"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].Columns[SourcePath]"
                      name="SourcePath"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[SourcePath]"
                      dataType="wstr"
                      length="500"
                      name="SourcePath" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[SourcePath]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[SourcePath]"
                      name="SourcePath" />
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Get file Names for Loop\Recordset Destination"
              componentClassID="Microsoft.RecordsetDestination"
              contactInfo="Recordset Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates and populates an in-memory ADO recordset that is available outside of the data flow. Scripts and other package elements can use the recordset. For example, use a recordset to store the names of files that will be loaded into the data warehouse."
              name="Recordset Destination">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the recordset."
                  name="VariableName">User::ADORecordSet</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Get file Names for Loop\Recordset Destination.Inputs[Recordset Destination Input]"
                  hasSideEffects="true"
                  name="Recordset Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Get file Names for Loop\Recordset Destination.Inputs[Recordset Destination Input].Columns[SourcePath]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="SourcePath"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].Columns[SourcePath]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Get file Names for Loop.Paths[OLE DB Source Output]"
              endId="Package\Get file Names for Loop\Recordset Destination.Inputs[Recordset Destination Input]"
              name="OLE DB Source Output"
              startId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Stats on Staging table"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{7843CCB6-46D4-4CD0-8598-C9233CF70030}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Stats on Staging table"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; © 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{E445FE49-1BA7-4D82-A00C-713D6293CB40}"
          SQLTask:SqlStatementSource="UPDATE STATISTICS [Staging].[FDS];&#xA;&#xA;CHECKPOINT;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{B2FCB8C3-E142-4CBF-A226-1BB14B371163}"
      DTS:From="Package\Foreach Loop Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Update Stats on Staging table" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{1AC3EF43-5C5C-431A-B4D8-6F036F3AD348}"
      DTS:From="Package\Get file Names for Loop"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Foreach Loop Container" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="181,42"
          Id="Package\Foreach Loop Container\Date Variable to Load"
          TopLeft="25,25" />
        <NodeLayout
          Size="126,42"
          Id="Package\Foreach Loop Container\Delete file"
          TopLeft="63,165" />
        <NodeLayout
          Size="166,42"
          Id="Package\Foreach Loop Container\Parse and load file"
          TopLeft="37.5,91.5" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="123.25,133.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31.5"
              Start="0,0"
              End="0,24">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint 1]"
          TopLeft="118,67">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,24.5"
              Start="0,0"
              End="0,17">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,17" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="240,262"
          Size="240,305"
          Id="Package\Foreach Loop Container"
          TopLeft="257,106" />
        <NodeLayout
          Size="190,42"
          Id="Package\Get file Names for Loop"
          TopLeft="285,16" />
        <NodeLayout
          Size="219,42"
          Id="Package\Update Stats on Staging table"
          TopLeft="274,435" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="380.25,411">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,24"
              Start="0,0"
              End="0,16.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,16.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="378.5,58">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,48"
              Start="0,0"
              End="0,40.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Foreach Loop Container\Parse and load file">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="154,42"
          Id="Package\Foreach Loop Container\Parse and load file\Derived Column"
          TopLeft="548,178" />
        <NodeLayout
          Size="138,42"
          Id="Package\Foreach Loop Container\Parse and load file\ParseFlatFile"
          TopLeft="407,67" />
        <NodeLayout
          Size="102,42"
          Id="Package\Foreach Loop Container\Parse and load file\DW1"
          TopLeft="566,352" />
        <NodeLayout
          Size="155,42"
          Id="Package\Foreach Loop Container\Parse and load file\Conditional Split"
          TopLeft="570,245" />
        <NodeLayout
          Size="119,42"
          Id="Package\Foreach Loop Container\Parse and load file\ErrorOut"
          TopLeft="269,163" />
        <EdgeLayout
          Id="Package\Foreach Loop Container\Parse and load file.Paths[GoodDateKey]"
          TopLeft="647.5,287">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-30.5,65"
              Start="0,0"
              End="-30.5,57.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28.5"
                    Point2="0,32.5"
                    Point3="-4,32.5" />
                  <mssgle:LineSegment
                    End="-26.5,32.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-26.5,32.5"
                    Point2="-30.5,32.5"
                    Point3="-30.5,36.5" />
                  <mssgle:LineSegment
                    End="-30.5,57.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-45.979453125,37.5,61.45890625,11.609375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Parse and load file.Paths[FDSOut]"
          TopLeft="497.666666666667,109">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="127.333333333333,69"
              Start="0,0"
              End="127.333333333333,61.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,24.0744985673353" />
                  <mssgle:CubicBezierSegment
                    Point1="0,24.0744985673353"
                    Point2="0,28.0744985673353"
                    Point3="4,28.0744985673353" />
                  <mssgle:LineSegment
                    End="123.333333333333,28.0744985673353" />
                  <mssgle:CubicBezierSegment
                    Point1="123.333333333333,28.0744985673353"
                    Point2="127.333333333333,28.0744985673353"
                    Point3="127.333333333333,32.0744985673353" />
                  <mssgle:LineSegment
                    End="127.333333333333,61.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="46.2602799479165,33.0744985673353,34.8127734375,9.5732421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Parse and load file.Paths[ErrorOut]"
          TopLeft="476,109">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-147.5,54"
              Start="0,0"
              End="-147.5,46.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,23" />
                  <mssgle:CubicBezierSegment
                    Point1="0,23"
                    Point2="0,27"
                    Point3="-4,27" />
                  <mssgle:LineSegment
                    End="-143.5,27" />
                  <mssgle:CubicBezierSegment
                    Point1="-143.5,27"
                    Point2="-147.5,27"
                    Point3="-147.5,31" />
                  <mssgle:LineSegment
                    End="-147.5,46.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-93.29638671875,32,39.0927734375,9.5732421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Parse and load file.Paths[Derived Column Output]"
          TopLeft="625,220">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="22.5,25"
              Start="0,0"
              End="22.5,17.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,8.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,8.5"
                    Point2="0,12.5"
                    Point3="4,12.5" />
                  <mssgle:LineSegment
                    End="18.5,12.5" />
                  <mssgle:CubicBezierSegment
                    Point1="18.5,12.5"
                    Point2="22.5,12.5"
                    Point3="22.5,16.5" />
                  <mssgle:LineSegment
                    End="22.5,17.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach Loop Container\Parse and load file\ErrorOut">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach Loop Container\Parse and load file\DW1">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Get file Names for Loop">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="182,42"
          Id="Package\Get file Names for Loop\Recordset Destination"
          TopLeft="396,174" />
        <NodeLayout
          Size="150,42"
          Id="Package\Get file Names for Loop\OLE DB Source"
          TopLeft="274,71" />
        <EdgeLayout
          Id="Package\Get file Names for Loop.Paths[OLE DB Source Output]"
          TopLeft="349,113">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="138,61"
              Start="0,0"
              End="138,53.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,26.5"
                    Point2="0,30.5"
                    Point3="4,30.5" />
                  <mssgle:LineSegment
                    End="134,30.5" />
                  <mssgle:CubicBezierSegment
                    Point1="134,30.5"
                    Point2="138,30.5"
                    Point3="138,34.5" />
                  <mssgle:LineSegment
                    End="138,53.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Get file Names for Loop\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>