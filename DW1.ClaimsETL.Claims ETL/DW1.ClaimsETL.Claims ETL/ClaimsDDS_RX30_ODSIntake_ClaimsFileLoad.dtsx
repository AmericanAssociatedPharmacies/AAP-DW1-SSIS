<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="4/12/2017 9:53:23 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="AAP-N202"
  DTS:CreatorName="AAP\sedwards"
  DTS:DTSID="{C1F7869F-30BB-4910-A582-1583A1553809}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="13.0.2165.0"
  DTS:LocaleID="1033"
  DTS:ObjectName="ClaimsDDS_RX30_ODSIntake_ClaimsFileLoad"
  DTS:PackageType="5"
  DTS:VersionBuild="78"
  DTS:VersionGUID="{26D61955-B55D-4E06-ABB5-A30A9D7FCA12}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[AAPDW1.ODSIntake]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{EEBA9A97-8563-4CCB-AE99-CCB331CB2794}"
      DTS:ObjectName="AAPDW1.ODSIntake">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=AAPDW1;Initial Catalog=ODSIntake;Provider=SQLNCLI11.1;Integrated Security=SSPI;Packet Size=32767;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:PackageParameters>
    <DTS:PackageParameter
      DTS:CreationName=""
      DTS:DataType="8"
      DTS:DTSID="{33120A96-6D68-45A0-91A7-09F7D0BD200D}"
      DTS:ObjectName="varFileDir">
      <DTS:Property
        DTS:DataType="8"
        DTS:Name="ParameterValue">\\db1\c$\Rx30\Staging\</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{010F7F08-AF77-4254-B35F-FCCE597130C8}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="ADORecordSet">
      <DTS:VariableValue
        DTS:DataSubType="ManagedSerializable"
        DTS:DataType="13">
        <SOAP-ENV:Envelope xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
          <SOAP-ENV:Body>
            <xsd:anyType
              id="ref-1"></xsd:anyType>
          </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      </DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7240A5F9-AAF8-4424-9B12-6E7D3CB8C290}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varFileDir">
      <DTS:VariableValue
        DTS:DataType="8">\\fs1.aap.local\Server\IT Department\RX30\Staging\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2C74E06F-3434-4A7B-B0E3-6E000E993B3F}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="varStagingFile">
      <DTS:VariableValue
        DTS:DataType="8"
        xml:space="preserve"></DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Foreach Loop Container"
      DTS:CreationName="STOCK:FOREACHLOOP"
      DTS:DelayValidation="True"
      DTS:Description="Foreach Loop Container"
      DTS:DTSID="{70F07858-24A2-4790-B592-493A569F2680}"
      DTS:ExecutableType="STOCK:FOREACHLOOP"
      DTS:LocaleID="-1"
      DTS:ObjectName="Foreach Loop Container">
      <DTS:ForEachEnumerator
        DTS:CreationName="Microsoft.ForEachADOEnumerator"
        DTS:DTSID="{7132126A-1E1D-475F-8139-3DD1E7835F89}"
        DTS:ObjectName="{7132126A-1E1D-475F-8139-3DD1E7835F89}">
        <DTS:ObjectData>
          <FEEADO
            EnumType="EnumerateRowsInFirstTable"
            VarName="User::ADORecordSet" />
        </DTS:ObjectData>
      </DTS:ForEachEnumerator>
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Delete file"
          DTS:CreationName="Microsoft.FileSystemTask"
          DTS:DelayValidation="True"
          DTS:Description="File System Task"
          DTS:DTSID="{A8E01DA3-3074-46B6-AC3C-685B7083F0BC}"
          DTS:ExecutableType="Microsoft.FileSystemTask"
          DTS:LocaleID="-1"
          DTS:ObjectName="Delete file"
          DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2012; Â© 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <FileSystemData
              TaskOperationType="DeleteFile"
              TaskSourcePath="User::varStagingFile"
              TaskIsSourceVariable="True" />
          </DTS:ObjectData>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\Foreach Loop Container\Parse and load file"
          DTS:CreationName="Microsoft.Pipeline"
          DTS:Description="Data Flow Task"
          DTS:DTSID="{2D824B4E-78EE-4DE9-810B-02917F17B73C}"
          DTS:ExecutableType="Microsoft.Pipeline"
          DTS:LocaleID="-1"
          DTS:ObjectName="Parse and load file"
          DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
          <DTS:Variables />
          <DTS:ObjectData>
            <pipeline
              version="1">
              <components>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\ErrorOut"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="ErrorOut"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[Error].[ErrorOutput]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                      connectionManagerRefId="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[ErrorDateTime]"
                          cachedDataType="dbTimeStamp"
                          cachedName="ErrorDateTime"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDateTime]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDateTime]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[FQNFileName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="1000"
                          cachedName="FQNFileName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FQNFileName]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FQNFileName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[FileErrorRowNumber]"
                          cachedDataType="i4"
                          cachedName="FileErrorRowNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FileErrorRowNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FileErrorRowNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[ErrorData]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="ErrorData"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorData]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorData]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].Columns[ErrorDescription]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="8000"
                          cachedName="ErrorDescription"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDescription]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[RowID]"
                          dataType="i4"
                          name="RowID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDateTime]"
                          dataType="dbTimeStamp"
                          name="ErrorDateTime" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FQNFileName]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          name="FQNFileName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[FileErrorRowNumber]"
                          dataType="i4"
                          name="FileErrorRowNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorData]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          name="ErrorData" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[ErrorDescription]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          name="ErrorDescription" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input].ExternalColumns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          name="RowCreatedDate" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile"
                  componentClassID="Microsoft.ManagedComponentHost"
                  contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;8"
                  description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
                  name="ParseFlatFile"
                  version="10">
                  <properties>
                    <property
                      dataType="System.String"
                      description="Stores the source code of the component"
                      isArray="true"
                      name="SourceCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="30">
                        <arrayElement
                          dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public Rx30OutBuffer Rx30OutBuffer;

    public ErrorOutBuffer ErrorOutBuffer;

    public virtual void FinishOutputs()
    {
    }

    private void MarkOutputsFinished()
    {

        if (null != Rx30OutBuffer)
        {
            Rx30OutBuffer.SetEndOfRowset();
            Rx30OutBuffer = null;
        }

        if (null != ErrorOutBuffer)
        {
            ErrorOutBuffer.SetEndOfRowset();
            ErrorOutBuffer = null;
        }

    }

    public override void PrimeOutput(int Outputs, int[] OutputIDs, PipelineBuffer[] Buffers, OutputNameMap OutputMap)
    {
       for(int Idx = 0; Idx < Outputs; Idx++)
       {
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"Rx30Out"))
            {
                Rx30OutBuffer = new Rx30OutBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
            if(OutputIDs[Idx] == GetOutputID(OutputMap, @"ErrorOut"))
            {
                ErrorOutBuffer = new ErrorOutBuffer(Buffers[Idx], GetColumnIndexes(OutputIDs[Idx]), OutputMap);
            }
        }

        CreateNewOutputRows();

        FinishOutputs();
        MarkOutputsFinished();

    }

    public virtual void CreateNewOutputRows()
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

    public String varStagingFile
    {
        get
        {
            return (String)(ParentComponent.ReadOnlyVariables["varStagingFile"].GetValueWithContext(ScriptComponent.EvaluatorContext));
        }
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
using Microsoft.SqlServer.Dts.Runtime;
using System.IO;
using System.Text.RegularExpressions;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{

    enum col
    {
        PharmID = 0,
        BINNbr,
        PCN,
        GroupNbr,
        Submitted,
        RxDate,
        QtyDispensed,
        DaySupply,
        NDCDispensed,
        FeeSubmitted,
        CostSubmitted,
        FeePaid,
        CostPaid,
        PlanAmount,
        CoPayAmount,
        UandC,
        TotalPrice,
        BS,
        BR,
        OI,
        DAW,
        DAWDesc,
        PatientPaid,
        GrossAmtDue,
        PlanID,
        RejCode,
        MessageResponse,
        TxResponse,
        RxNbr,
        RfNbr,
        PIDQ,
        PID,
        DoctorName,
        RA,
        NDCWritten,
        OtherAmount,
        TYPE,
        Rx30Lic,
        Compound,
        NetworkReimbID,
        PrescriberPhone,
        RxSource,
        DRDEA,
        UnitAWP,
        FlatTaxPaid,
        PCTTaxPaid,
        PCTTaxRate,
        PCTTaxBasis,
        IncentiveFeePaid,
        ProfFeePaid,
        PrescriberNPI,
        RxDiscount,
        ClaimAuthNumber,
        DateSold,

        MaxCols
    };

    public override void PreExecute()
    {
        base.PreExecute();
        /*
          Add your code here for preprocessing or remove if not needed
        */
    }

    public override void PostExecute()
    {
        base.PostExecute();
        /*
          Add your code here for postprocessing or remove if not needed
          You can set read/write variables here, for example:
          Variables.MyIntVar = 100
        */
    }


    private string left(string inString, int inInt)
    {
        inString = inString.Trim();

        if (inInt > inString.Length)
            inInt = inString.Length;

        return inString.Substring(0, inInt);
    }

    private void WriteError(DateTime dt, string fn, Int32 rc, string ErrRow, string ErrDesc)
    {

        ErrorOutBuffer.AddRow();
        ErrorOutBuffer.ErrorDateTime = dt;
        ErrorOutBuffer.FQNFileName = fn;
        ErrorOutBuffer.FileErrorRowNumber = rc;
        ErrorOutBuffer.ErrorData = ErrRow;
        ErrorOutBuffer.ErrorDescription = ErrDesc;

    }

    private bool NonPrintableChars(string inp)
    {
        //Regex reg = new Regex("[^A-Za-z0-9_]");
        Regex reg = new Regex("[\x00-\x1f]");
        return (reg.IsMatch(inp));
    }



    public override void CreateNewOutputRows()
    {
        //    /*
        //      Add rows by calling the AddRow method on the member variable named "<Output Name>Buffer".
        //      For example, call MyOutputBuffer.AddRow() if your output was named "MyOutput".
        //    */

        string inpFileNameAndPath = Variables.varStagingFile.ToString();
        string inp;
        string[] x;
        char[] delimiterChars = {'|'};
        int MinCols = ((int)col.MaxCols) - 1;
        Int32 RowCount = -1;
        Int32 FileRowID = 0;
        string strfiledir;

        strfiledir = inpFileNameAndPath.ToString();
        
        using (StreamReader sr = new StreamReader(inpFileNameAndPath))
        { 
            while ((inp = sr.ReadLine()) != null)

            try
            {
                
                {
                    RowCount++;
                    FileRowID++;

                    //Get rid of double and greater white spaces
                    //inp = inp.Replace("  ", " ").Replace("   ", " ").Trim().ToString();

                    // Split the inp into the array;
                    x = inp.Split(delimiterChars);

                    // Check for errors.

                    // Non-printable characters
                    if (NonPrintableChars(inp.Replace("\t", "")) == true)
                    {
                        DateTime ErrorFileDate = DateTime.Now;

                        WriteError(ErrorFileDate, inpFileNameAndPath, RowCount, inp, "Nonprintable data found in the row.");
                        continue;
                    }


                    // Too few columns
                    if (x.GetLength(0) < MinCols)
                    {
                        DateTime ErrorFileDate = DateTime.Now;

                        WriteError(ErrorFileDate, inpFileNameAndPath, RowCount, inp, "Not enough columns in row");
                        continue;
                    }

                    //int DateKey = int.Parse(DateTime.Now.ToString("yyyyMMdd"));

                    {
                        //This will skip over the column name row
                        if (RowCount > 0)
                        {

                            // Map this to our output variables.
                            Rx30OutBuffer.AddRow();

                            Rx30OutBuffer.FileRowID = FileRowID;
                            Rx30OutBuffer.PharmID = left(x[(int)col.PharmID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.BINNbr = left(x[(int)col.BINNbr].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PCN = left(x[(int)col.PCN].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.GroupNbr = left(x[(int)col.GroupNbr].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.Submitted = left(x[(int)col.Submitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.RxDate = left(x[(int)col.RxDate].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.QtyDispensed = left(x[(int)col.QtyDispensed].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.DaySupply = left(x[(int)col.DaySupply].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.NDCDispensed = left(x[(int)col.NDCDispensed].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.FeeSubmitted = left(x[(int)col.FeeSubmitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.CostSubmitted = left(x[(int)col.CostSubmitted].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.FeePaid = left(x[(int)col.FeePaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.CostPaid = left(x[(int)col.CostPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PlanAmount = left(x[(int)col.PlanAmount].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.CoPayAmount = left(x[(int)col.CoPayAmount].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.UandC = left(x[(int)col.UandC].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.TotalPrice = left(x[(int)col.TotalPrice].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.BS = left(x[(int)col.BS].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.BR = left(x[(int)col.BR].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.OI = left(x[(int)col.OI].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.DAW = left(x[(int)col.DAW].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.DAWDesc = left(x[(int)col.DAWDesc].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PatientPaid = left(x[(int)col.PatientPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.GrossAmtDue = left(x[(int)col.GrossAmtDue].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PlanID = left(x[(int)col.PlanID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.RejCode = left(x[(int)col.RejCode].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.MessageResponse = left(x[(int)col.MessageResponse].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.TxResponse = left(x[(int)col.TxResponse].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.RxNbr = left(x[(int)col.RxNbr].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.RfNbr = left(x[(int)col.RfNbr].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PIDQ = left(x[(int)col.PIDQ].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PID = left(x[(int)col.PID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.DoctorName = left(x[(int)col.DoctorName].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.RA = left(x[(int)col.RA].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.NDCWritten = left(x[(int)col.NDCWritten].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.OtherAmount = left(x[(int)col.OtherAmount].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.TYPE = left(x[(int)col.TYPE].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.Rx30Lic = left(x[(int)col.Rx30Lic].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.Compound = left(x[(int)col.Compound].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.NetworkReimbID = left(x[(int)col.NetworkReimbID].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PrescriberPhone = left(x[(int)col.PrescriberPhone].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.RxSource = left(x[(int)col.RxSource].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.DRDEA = left(x[(int)col.DRDEA].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.UnitAWP = left(x[(int)col.UnitAWP].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.FlatTaxPaid = left(x[(int)col.FlatTaxPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PCTTaxPaid = left(x[(int)col.PCTTaxPaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PCTTaxRate = left(x[(int)col.PCTTaxRate].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PCTTaxBasis = left(x[(int)col.PCTTaxBasis].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.IncentiveFeePaid = left(x[(int)col.IncentiveFeePaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.ProfFeePaid = left(x[(int)col.ProfFeePaid].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.PrescriberNPI = left(x[(int)col.PrescriberNPI].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.RxDiscount = left(x[(int)col.RxDiscount].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.ClaimAuthNumber = left(x[(int)col.ClaimAuthNumber].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);
                            Rx30OutBuffer.FileDir = strfiledir.ToString();
                            Rx30OutBuffer.RowCreatedDate = DateTime.Now;
                            Rx30OutBuffer.DateSold = left(x[(int)col.DateSold].Replace("  ", " ").Replace("   ", " ").Trim().ToString(), 500);

                        }

                    }
                }
                
            }
          
            catch (Exception ex)

                    {

                      DateTime  ErrorFileDate = DateTime.Now;
                
                        WriteError(ErrorFileDate, inpFileNameAndPath, FileRowID, inp, ex.ToString());
                        continue;                    
                    
                    
                    }
            }

    }
}

]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Rx30OutBuffer: ScriptBuffer

{
    public Rx30OutBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public Int32 FileRowID
    {
        set
        {
            this[0] = value;
        }
    }
    public bool FileRowID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PharmID
    {
        set
        {
            this[1] = value;
        }
    }
    public bool PharmID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String BINNbr
    {
        set
        {
            this[2] = value;
        }
    }
    public bool BINNbr_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PCN
    {
        set
        {
            this[3] = value;
        }
    }
    public bool PCN_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String GroupNbr
    {
        set
        {
            this[4] = value;
        }
    }
    public bool GroupNbr_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Submitted
    {
        set
        {
            this[5] = value;
        }
    }
    public bool Submitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RxDate
    {
        set
        {
            this[6] = value;
        }
    }
    public bool RxDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String QtyDispensed
    {
        set
        {
            this[7] = value;
        }
    }
    public bool QtyDispensed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DaySupply
    {
        set
        {
            this[8] = value;
        }
    }
    public bool DaySupply_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(8);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String NDCDispensed
    {
        set
        {
            this[9] = value;
        }
    }
    public bool NDCDispensed_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(9);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FeeSubmitted
    {
        set
        {
            this[10] = value;
        }
    }
    public bool FeeSubmitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(10);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CostSubmitted
    {
        set
        {
            this[11] = value;
        }
    }
    public bool CostSubmitted_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(11);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FeePaid
    {
        set
        {
            this[12] = value;
        }
    }
    public bool FeePaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(12);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CostPaid
    {
        set
        {
            this[13] = value;
        }
    }
    public bool CostPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(13);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PlanAmount
    {
        set
        {
            this[14] = value;
        }
    }
    public bool PlanAmount_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(14);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String CoPayAmount
    {
        set
        {
            this[15] = value;
        }
    }
    public bool CoPayAmount_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(15);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String UandC
    {
        set
        {
            this[16] = value;
        }
    }
    public bool UandC_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(16);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TotalPrice
    {
        set
        {
            this[17] = value;
        }
    }
    public bool TotalPrice_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(17);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String BS
    {
        set
        {
            this[18] = value;
        }
    }
    public bool BS_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(18);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String BR
    {
        set
        {
            this[19] = value;
        }
    }
    public bool BR_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(19);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String OI
    {
        set
        {
            this[20] = value;
        }
    }
    public bool OI_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(20);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DAW
    {
        set
        {
            this[21] = value;
        }
    }
    public bool DAW_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(21);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DAWDesc
    {
        set
        {
            this[22] = value;
        }
    }
    public bool DAWDesc_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(22);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PatientPaid
    {
        set
        {
            this[23] = value;
        }
    }
    public bool PatientPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(23);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String GrossAmtDue
    {
        set
        {
            this[24] = value;
        }
    }
    public bool GrossAmtDue_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(24);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PlanID
    {
        set
        {
            this[25] = value;
        }
    }
    public bool PlanID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(25);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RejCode
    {
        set
        {
            this[26] = value;
        }
    }
    public bool RejCode_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(26);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String MessageResponse
    {
        set
        {
            this[27] = value;
        }
    }
    public bool MessageResponse_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(27);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TxResponse
    {
        set
        {
            this[28] = value;
        }
    }
    public bool TxResponse_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(28);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RxNbr
    {
        set
        {
            this[29] = value;
        }
    }
    public bool RxNbr_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(29);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RfNbr
    {
        set
        {
            this[30] = value;
        }
    }
    public bool RfNbr_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(30);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PIDQ
    {
        set
        {
            this[31] = value;
        }
    }
    public bool PIDQ_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(31);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PID
    {
        set
        {
            this[32] = value;
        }
    }
    public bool PID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(32);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DoctorName
    {
        set
        {
            this[33] = value;
        }
    }
    public bool DoctorName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(33);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RA
    {
        set
        {
            this[34] = value;
        }
    }
    public bool RA_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(34);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String NDCWritten
    {
        set
        {
            this[35] = value;
        }
    }
    public bool NDCWritten_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(35);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String OtherAmount
    {
        set
        {
            this[36] = value;
        }
    }
    public bool OtherAmount_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(36);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String TYPE
    {
        set
        {
            this[37] = value;
        }
    }
    public bool TYPE_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(37);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Rx30Lic
    {
        set
        {
            this[38] = value;
        }
    }
    public bool Rx30Lic_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(38);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Compound
    {
        set
        {
            this[39] = value;
        }
    }
    public bool Compound_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(39);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String NetworkReimbID
    {
        set
        {
            this[40] = value;
        }
    }
    public bool NetworkReimbID_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(40);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberPhone
    {
        set
        {
            this[41] = value;
        }
    }
    public bool PrescriberPhone_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(41);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RxSource
    {
        set
        {
            this[42] = value;
        }
    }
    public bool RxSource_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(42);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DRDEA
    {
        set
        {
            this[43] = value;
        }
    }
    public bool DRDEA_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(43);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String UnitAWP
    {
        set
        {
            this[44] = value;
        }
    }
    public bool UnitAWP_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(44);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FlatTaxPaid
    {
        set
        {
            this[45] = value;
        }
    }
    public bool FlatTaxPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(45);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PCTTaxPaid
    {
        set
        {
            this[46] = value;
        }
    }
    public bool PCTTaxPaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(46);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PCTTaxRate
    {
        set
        {
            this[47] = value;
        }
    }
    public bool PCTTaxRate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(47);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PCTTaxBasis
    {
        set
        {
            this[48] = value;
        }
    }
    public bool PCTTaxBasis_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(48);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String IncentiveFeePaid
    {
        set
        {
            this[49] = value;
        }
    }
    public bool IncentiveFeePaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(49);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ProfFeePaid
    {
        set
        {
            this[50] = value;
        }
    }
    public bool ProfFeePaid_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(50);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String PrescriberNPI
    {
        set
        {
            this[51] = value;
        }
    }
    public bool PrescriberNPI_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(51);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String RxDiscount
    {
        set
        {
            this[52] = value;
        }
    }
    public bool RxDiscount_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(52);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ClaimAuthNumber
    {
        set
        {
            this[53] = value;
        }
    }
    public bool ClaimAuthNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(53);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FileDir
    {
        set
        {
            this[54] = value;
        }
    }
    public bool FileDir_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(54);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime RowCreatedDate
    {
        set
        {
            this[55] = value;
        }
    }
    public bool RowCreatedDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(55);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String DateSold
    {
        set
        {
            this[56] = value;
        }
    }
    public bool DateSold_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(56);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}

public class ErrorOutBuffer: ScriptBuffer

{
    public ErrorOutBuffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public DateTime ErrorDateTime
    {
        set
        {
            this[0] = value;
        }
    }
    public bool ErrorDateTime_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String FQNFileName
    {
        set
        {
            this[1] = value;
        }
    }
    public bool FQNFileName_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(1);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 FileErrorRowNumber
    {
        set
        {
            this[2] = value;
        }
    }
    public bool FileErrorRowNumber_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(2);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorData
    {
        set
        {
            this[3] = value;
        }
    }
    public bool ErrorData_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String ErrorDescription
    {
        set
        {
            this[4] = value;
        }
    }
    public bool ErrorDescription_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public DateTime RowCreatedDate
    {
        set
        {
            this[5] = value;
        }
    }
    public bool RowCreatedDate_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public void AddRow()
    {
        base.AddRow();
    }

    new public void SetEndOfRowset()
    {
        base.SetEndOfRowset();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Settings.get_Default():SC_0bf11d85736748cc88c918f84be77cc9.Properties.Sett" +
    "ings")]

namespace SC_0bf11d85736748cc88c918f84be77cc9.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0bf11d85736748cc88c918f84be77cc9.csproj]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{CDFD559B-3F9E-41CC-9DA7-3DF2DB7E84C7}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_0bf11d85736748cc88c918f84be77cc9</RootNamespace>
    <AssemblyName>SC_0bf11d85736748cc88c918f84be77cc9</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=13.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptComponent" IconIndex="0" />
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Project]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_0bf11d85736748cc88c918f84be77cc9</msb:CodeName>
		<msb:DisplayName>SC_0bf11d85736748cc88c918f84be77cc9</msb:DisplayName>
		<msb:ProjectId>{B8D60173-8497-481D-9638-4082EFBCFF9A}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_0bf11d85736748cc88c918f84be77cc9.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_0bf11d85736748cc88c918f84be77cc9")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_0bf11d85736748cc88c918f84be77cc9")]
[assembly: AssemblyCopyright("Copyright @  2017")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_0bf11d85736748cc88c918f84be77cc9.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_0bf11d85736748cc88c918f84be77cc9.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Stores the binary representation of the component"
                      isArray="true"
                      name="BinaryCode"
                      state="cdata">
                      <arrayElements
                        arrayElementCount="2">
                        <arrayElement
                          dataType="System.String"><![CDATA[SC_0bf11d85736748cc88c918f84be77cc9.dll]]></arrayElement>
                        <arrayElement
                          dataType="System.String"><![CDATA[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
DZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8lAAAG
AnsDAAAEAggfDppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAo
AwAABm8nAAAGAnsDAAAEAggfD5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8X
AAAKIPQBAAAoAwAABm8pAAAGAnsDAAAEAggfEJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoA
AApvEgAACm8XAAAKIPQBAAAoAwAABm8rAAAGAnsDAAAEAggfEZpyjwAAcHKVAABwbxoAAApymQAA
cHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8tAAAGAnsDAAAEAggfEppyjwAAcHKVAABw
bxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8vAAAGAnsDAAAEAggfE5py
jwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8xAAAGAnsD
AAAEAggfFJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAA
Bm8zAAAGAnsDAAAEAggfFZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAK
IPQBAAAoAwAABm81AAAGAnsDAAAEAggfFppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApv
EgAACm8XAAAKIPQBAAAoAwAABm83AAAGAnsDAAAEAggfF5pyjwAAcHKVAABwbxoAAApymQAAcHKV
AABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm85AAAGAnsDAAAEAggfGJpyjwAAcHKVAABwbxoA
AApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm87AAAGAnsDAAAEAggfGZpyjwAA
cHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm89AAAGAnsDAAAE
AggfGppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm8/
AAAGAnsDAAAEAggfG5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQB
AAAoAwAABm9BAAAGAnsDAAAEAggfHJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAA
Cm8XAAAKIPQBAAAoAwAABm9DAAAGAnsDAAAEAggfHZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABw
bxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9FAAAGAnsDAAAEAggfHppyjwAAcHKVAABwbxoAAApy
mQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9HAAAGAnsDAAAEAggfH5pyjwAAcHKV
AABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9JAAAGAnsDAAAEAggf
IJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9LAAAG
AnsDAAAEAggfIZpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAo
AwAABm9NAAAGAnsDAAAEAggfIppyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8X
AAAKIPQBAAAoAwAABm9PAAAGAnsDAAAEAggfI5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoA
AApvEgAACm8XAAAKIPQBAAAoAwAABm9RAAAGAnsDAAAEAggfJJpyjwAAcHKVAABwbxoAAApymQAA
cHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9TAAAGAnsDAAAEAggfJZpyjwAAcHKVAABw
bxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9VAAAGAnsDAAAEAggfJppy
jwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAABm9XAAAGAnsD
AAAEAggfJ5pyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAKIPQBAAAoAwAA
Bm9ZAAAGAnsDAAAEAggfKJpyjwAAcHKVAABwbxoAAApymQAAcHKVAABwbxoAAApvEgAACm8XAAAK
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
BQAAAIIAAACDAAAAAQAAAAUAAAABAAAAAQAAAAAAOwYBAAAAAAAGAPMErQ0GAIcFrQ0GAD8Emg0P
ACEOAAAGAGwE9wsGANYE9wsGALcE9wsGAG4F9wsGABMF9wsGACwF9wsGAIME9wsGAJ4E0gUKAEcF
IAMGAA4DkwsGAN8M/gAGABkMkwsGAJ8LkwsKAAYNIAMOAPcMIAMKAEQMIAMKAHYPIAMGACIPkwsG
ACIEmg0GADQNzQ0GADgM4gsSAPIDJQYSAFMEJQYSAIIDzQsGAAcErQ0GAPcFkwsSAGgQuw4GAIMM
kwsGAG4QkwsGAOwM/gAGAKMCkwsGADoAkwsGAAkMkwsWABEARA0WAAEARA1XACIQAAAWACIARA0G
AFUDkwsGAK8CkwsGAHgQ9wsAAAAAZAAAAAAAAQABAAEAEADCCwAAFAABAAEAAQAQABMNAABJAAEA
CAABABAAIQ0AAEkAAQB+AAEAEABYDwAAVQABAI4AAQAQANoOAABZAAUAkwABABAAaw4AAFkABgCU
AAAAEADUDTAOWQAHAJYAAAEQAJoOMA5xAAkAmgADAQAAfQsAAEUACgCdAAYA2g7XAQYAaw7bAQYA
Ew3fAQYAIQ3jAQEAZg/nAQEAZg/nAREApAvrAREAcgPvAREAegLzAQYGMwH3AVaApwD6AVaAjAz6
AVaA+gD6AVaAoQz6AVaA0gH6AVaA3AP6AVaAngH6AVaAhRD6AVaAjQH6AVaAvQH6AVaAzgH6AVaA
BQL6AVaAIQL6AVaAmQ/6AVaAuA/6AVaAggD6AVaAbwL6AVaAKAH6AVaAIQH6AVaA4QD6AVaALwH6
AVaAZQH6AVaAEQL6AVaAwAX6AVaAswD6AVaAmwL6AVaAngP6AVaAsgP6AVaArgz6AVaAlwz6AVaA
GAH6AVaAjAD6AVaA+gL6AVaAewD6AVaAtAv6AVaAqA/6AVaA2AD6AVaAVgH6AVaAWgL6AVaAlAD6
AVaARQP6AVaAjgL6AVaAcQD6AVaADAH6AVaAPQL6AVaALgL6AVaA5wP6AVaApw76AVaA7AH6AVaA
AQL6AVaA6AD6AVaAig/6AVaAuAz6AVaATQL6AVaAsw76AVAgAAAAAMYApQUGAAEAWCAAAAAAxgCw
BQYAAQBgIAAAAACBADsP/gEBAIQgAAAAAIEAeA0EAgMA2iAAAAAAgQDmDikACADsIAAAAADGAA4P
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
SDgAAAAAhgjFAxMCiwADMQAAAACGCNAJDgKMABI4AAAAAIYAWhAGAI0AGjgAAAAAhgAsDwYAjQAi
OAAAAACGAC8PbACNAFc4AAAAAIYYgw0GAI0AdzgAAAAAxgEADwYAjQB5OAAAAACBAHUBBgCNALA4
AAAAAMYAAhAZAo0AdzgAAAAAxgEODwYAkQAvOQAAAACGGIMNJQKRAD45AAAAAIYYgw0lApIATTkA
AAAAhgjTAhsAkwBzOQAAAACDGIMNBgCTAHs5AAAAAJMIMA0rApMApzkAAAAAkwhaAzACkwCuOQAA
AACTCGYDNQKTALY5AAAAAJYIRg87ApQAvTkAAAAAhhiDDQYAlADFOQAAAACRGIkNQAKUAAAAAQDs
BQAAAgBSDwAAAQApDwAAAgC/CwAAAwBeAQAABABhEAAABQBtAQAAAQB/DAAAAQApDQAAAgB1DgAA
AwBSDAAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDM
BQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAA
AQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDM
BQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAA
AQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDM
BQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAA
AQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDM
BQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAA
AQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDM
BQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAA
AQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDM
BQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAA
AQDMBQAAAQApDQAAAgB1DgAAAwBSDAAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDM
BQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQDMBQAAAQAGDwAAAgCQDQAAAwD4DgAA
BABSDAAAAQB8DwAAAQB8DwAAAQDMBQkAgw0BABEAgw0GABkAgw0KACkAgw0QADEAgw0QADkAgw0Q
AEEAgw0QAEkAgw0QAFEAgw0QAFkAgw0QAGEAgw0QAGkAgw0GALkAgw0GANkAgw0VAOkAgw0GAKkA
pQUGAKkAsAUGAPEAmgsbAPEAEAYfAPEA/gUjAPkAgw0QAPkACAYpALEA9QUbAHkAgw0QAPEAQA9F
APEAYwJMAHEAUhBSAAkBGwZXABEBFwMbABkBvQMGAJEAgw1cAJEAigtmAJEAdQsBACkBgw0QAJEA
WhAGAJEALA8GAJEALw9sAKkAgw0GAKkAugB0AKkAiQ57ALEAgw0GAKkAXw6BADEBgQuHAKkAPRCO
ADkBDhCUAFEBwQKbAFEBdBCkAMEAgw2qAOEAgw0GAAgALADEAAgAMADJAAgANADOAAgAOADTAAgA
PADYAAgAQADdAAgARADiAAgASADnAAgATADsAAgAUADxAAgAVAD2AAgAWAD7AAgAXAAAAQgAYAAF
AQgAZAAKAQgAaAAPAQgAbAAUAQgAcAAZAQgAdAAeAQgAeAAjAQgAfAAoAQgAgAAtAQgAhAAyAQgA
iAA3AQgAjAA8AQgAkABBAQgAlABGAQgAmABLAQgAnABQAQgAoABVAQgApABaAQgAqABfAQgArABk
AQgAsABpAQgAtABuAQgAuABzAQgAvAB4AQgAwAB9AQgAxACCAQgAyACHAQgAzACMAQgA0ACRAQgA
1ACWAQgA2ACbAQgA3ACgAQgA4AClAQgA5ACqAQgA6ACvAQgA7AC0AQgA8AC5AQgA9AC+AQgA+ADD
AQgA/ADIAQgAAAHNAQgABAHSAS4ACwBkAi4AEwBtAi4AGwCMAi4AIwCVAi4AKwC+Ai4AMwC+Ai4A
OwC+Ai4AQwCVAi4ASwDEAi4AUwC+Ai4AWwDbAkMAYwDJAAMBawDJACEBewDJAAkQcwCMAikQcwCM
Ai4AcAADAAEABABzAAcAfwAIAIAACQCCAAAAygBEAgAA5QZIAgAApwBMAgAAwAZIAgAAjAxMAgAA
XwpIAgAA+gBMAgAAMQdIAgAAoQxMAgAAggpIAgAA0gFMAgAAKghIAgAA3ANMAgAA7glIAgAAngFM
AgAA4QdIAgAAhRBMAgAAZAtIAgAAjQFMAgAAyQdIAgAAvQFMAgAADghIAgAAzgFMAgAAJghIAgAA
BQJMAgAAcghIAgAAIQJMAgAAnAhIAgAAmQ9MAgAAIAtIAgAAuA9MAgAATQtIAgAAggBMAgAAhgZI
AgAAbwJMAgAABQlIAgAAKAFMAgAAcQdIAgAAIQFMAgAAYwdIAgAA4QBMAgAACgdIAgAALwFMAgAA
fwdIAgAAZQFMAgAAtgdIAgAAEQJMAgAAhQhIAgAAwAVMAgAAFgpIAgAAswBMAgAA0wZIAgAAmwJM
AgAALwlIAgAAngNMAgAAowlIAgAAsgNMAgAAvglIAgAArgxMAgAAlgpIAgAAlwxMAgAAcQpIAgAA
GAFMAgAAUwdIAgAAjABMAgAAlwZIAgAA+gJMAgAAWQlIAgAAewBMAgAAeAZIAgAAtAtMAgAALQpI
AgAAqA9MAgAANgtIAgAA2ABMAgAA+gZIAgAAVgFMAgAAowdIAgAAWgJMAgAA8QhIAgAAlABMAgAA
pgZIAgAARQNMAgAAiAlIAgAAjgJMAgAAGwlIAgAAcQBMAgAAZwZIAgAADAFMAgAAQAdIAgAAPQJM
AgAAxghIAgAALgJMAgAAsAhIAgAA5wNMAgAAAApIAgAApw5MAgAA8wpIAgAA7AFMAgAAUghIAgAA
AQJMAgAAbghIAgAA6ABMAgAAGAdIAgAAig9MAgAACgtIAgAAuAxMAgAApwpIAgAAcA1MAgAA4ApI
AgAAyQNQAgAA1AlIAgAATQJMAgAA3QhIAgAACQNQAgAAbwlIAgAA6gJMAgAAQglIAgAAzAxEAgAA
wgpIAgAAPwFMAgAAjgdIAgAAJwxMAgAAQwpIAgAAyQNQAgAA1AlIAgAA1wJMAgAANA1VAgAAegNa
AgAASg9fAgEACQADAAEACgAFAAEACwAHAAEADAAJAAEADQALAAEADgANAAEADwAPAAEAEAARAAEA
EQATAAEAEgAVAAEAEwAXAAEAFAAZAAEAFQAbAAEAFgAdAAEAFwAfAAEAGAAhAAEAGQAjAAEAGgAl
AAEAGwAnAAEAHAApAAEAHQArAAEAHgAtAAEAHwAvAAEAIAAxAAEAIQAzAAEAIgA1AAEAIwA3AAEA
JAA5AAEAJQA7AAEAJgA9AAEAJwA/AAEAKABBAAEAKQBDAAEAKgBFAAEAKwBHAAEALABJAAEALQBL
AAEALgBNAAEALwBPAAEAMABRAAEAMQBTAAEAMgBVAAEAMwBXAAEANABZAAEANQBbAAEANgBdAAEA
NwBfAAEAOABhAAEAOQBjAAEAOgBlAAEAOwBnAAEAPABpAAEAPQBrAAEAPgBtAAEAPwBvAAEAQABx
AAEAQQBzAAEAQgB1AAEAQwB3AAEARAB5AAEARQB7AAEARgB9AAEARwB/AAEASACBAAEASQCDAAEA
SgCFAAEASwCHAAEATACJAAEATQCLAAEATgCNAAEATwCPAAEAUACRAAEAUQCTAAEAUgCVAAEAUwCX
AAEAVACZAAEAVQCbAAEAVgCdAAEAVwCfAAEAWAChAAEAWQCjAAEAWgClAAEAWwCnAAEAXACpAAEA
XQCrAAEAXgCtAAEAXwCvAAEAYACxAAEAYQCzAAEAYgC1AAEAYwC3AAEAZAC5AAEAZQC7AAEAZgC9
AAEAZwC/AAEAaADBAAEAaQDDAAEAagDFAAEAawDHAAEAbADJAAEAbQDLAAEAbgDNAAEAbwDPAAEA
cADRAAEAcQDTAAEAcgDVAAEAcwDXAAEAdADZAAEAdQDbAAEAdgDdAAEAdwDfAAEAeADhAAEAeQDj
AAEAegDlAAEAfwDnAAEAgADpAAEAgQDrAAEAggDtAAEAgwDvAAEAhADxAAEAhQDzAAEAhgD1AAEA
hwD3AAEAiAD5AAEAiQD7AAEAigD9AAIAlQD/AAIAlwABAQIAmAADAQEAmQADAQIAmgAFAQSAAAAB
AAAAAAAAAAAAAAAAAEAAAAAEAAAAAAAAAAAAAACyAEkBAAAAAA0AAAAAAAAAAAAAALsAxA8AAAAA
DQAAAAAAAAAAAAAAuwDhDwAAAAAEAAAAAAAAAAAAAACyAJMLAAAAAA0AAAAAAAAAAAAAALsAXAwA
AAAAAAAAAAEAAADeDQAACgACAAAAAElEVFNWYXJpYWJsZTEwMABJRFRTVmFyaWFibGVzMTAwAElE
VFNFdmFsdWF0b3JDb250ZXh0MTAwAEludDMyAFNDXzBiZjExZDg1NzM2NzQ4Y2M4OGM5MThmODRi
ZTc3Y2M5ADxNb2R1bGU+AHNldF9EUkRFQQBzZXRfUkEAc2V0X1VhbmRDAHNldF9QSUQAc2V0X05l
dHdvcmtSZWltYklEAHNldF9QaGFybUlEAHNldF9QbGFuSUQAR2V0T3V0cHV0SUQAc2V0X0ZpbGVS
b3dJRABzZXRfVFlQRQBzZXRfT0kAc2V0X1ByZXNjcmliZXJOUEkAc2V0X1BDTgBTeXN0ZW0uSU8A
c2V0X1VuaXRBV1AAc2V0X1BJRFEAc2V0X0JSAHNldF9CUwBzZXRfREFXAHZhbHVlX18Ac2V0X0Vy
cm9yRGF0YQBtc2NvcmxpYgBzZXRfUngzMExpYwByYwBzZXRfREFXRGVzYwBFcnJEZXNjAE1hcmtP
dXRwdXRzRmluaXNoZWQAc2V0X05EQ0Rpc3BlbnNlZABzZXRfUXR5RGlzcGVuc2VkAHNldF9TdWJt
aXR0ZWQAc2V0X0ZlZVN1Ym1pdHRlZABzZXRfQ29zdFN1Ym1pdHRlZABzZXRfRmVlUGFpZABzZXRf
SW5jZW50aXZlRmVlUGFpZABzZXRfUHJvZkZlZVBhaWQAc2V0X1BhdGllbnRQYWlkAHNldF9Db3N0
UGFpZABzZXRfUENUVGF4UGFpZABzZXRfRmxhdFRheFBhaWQAc2V0X0RhdGVTb2xkAHNldF9Db21w
b3VuZABSZXBsYWNlAHNldF9Ub3RhbFByaWNlAGRlZmF1bHRJbnN0YW5jZQBzZXRfUnhTb3VyY2UA
c2V0X1JlakNvZGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5k
bGUAZ2V0X3ZhclN0YWdpbmdGaWxlAHNldF9GUU5GaWxlTmFtZQBzZXRfRG9jdG9yTmFtZQBzZXRf
RXJyb3JEYXRlVGltZQBSZWFkTGluZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZQBz
ZXRfUHJlc2NyaWJlclBob25lAFR5cGUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VD
dWx0dXJlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAHNldF9NZXNzYWdlUmVzcG9uc2UAc2V0X1R4
UmVzcG9uc2UARGlzcG9zZQBzZXRfUm93Q3JlYXRlZERhdGUAc2V0X1J4RGF0ZQBzZXRfUENUVGF4
UmF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1
Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3Nh
YmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRy
aWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJp
YnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNB
dHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmli
dXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFu
eUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBQcmVFeGVjdXRlAFBvc3RF
eGVjdXRlAHNldF9Hcm9zc0FtdER1ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAGlu
U3RyaW5nAFRvU3RyaW5nAFN1YnN0cmluZwBJc01hdGNoAGdldF9MZW5ndGgAR2V0TGVuZ3RoAFN5
c3RlbS5Db21wb25lbnRNb2RlbABTQ18wYmYxMWQ4NTczNjc0OGNjODhjOTE4Zjg0YmU3N2NjOS5k
bGwAc2V0X0RSREVBX0lzTnVsbABzZXRfUkFfSXNOdWxsAHNldF9VYW5kQ19Jc051bGwAc2V0X1BJ
RF9Jc051bGwAc2V0X05ldHdvcmtSZWltYklEX0lzTnVsbABzZXRfUGhhcm1JRF9Jc051bGwAc2V0
X1BsYW5JRF9Jc051bGwAc2V0X0ZpbGVSb3dJRF9Jc051bGwAc2V0X1RZUEVfSXNOdWxsAHNldF9P
SV9Jc051bGwAc2V0X1ByZXNjcmliZXJOUElfSXNOdWxsAHNldF9QQ05fSXNOdWxsAHNldF9Vbml0
QVdQX0lzTnVsbABzZXRfUElEUV9Jc051bGwAc2V0X0JSX0lzTnVsbABzZXRfQlNfSXNOdWxsAHNl
dF9EQVdfSXNOdWxsAHNldF9FcnJvckRhdGFfSXNOdWxsAHNldF9SeDMwTGljX0lzTnVsbABzZXRf
REFXRGVzY19Jc051bGwAc2V0X05EQ0Rpc3BlbnNlZF9Jc051bGwAc2V0X1F0eURpc3BlbnNlZF9J
c051bGwAc2V0X1N1Ym1pdHRlZF9Jc051bGwAc2V0X0ZlZVN1Ym1pdHRlZF9Jc051bGwAc2V0X0Nv
c3RTdWJtaXR0ZWRfSXNOdWxsAHNldF9GZWVQYWlkX0lzTnVsbABzZXRfSW5jZW50aXZlRmVlUGFp
ZF9Jc051bGwAc2V0X1Byb2ZGZWVQYWlkX0lzTnVsbABzZXRfUGF0aWVudFBhaWRfSXNOdWxsAHNl
dF9Db3N0UGFpZF9Jc051bGwAc2V0X1BDVFRheFBhaWRfSXNOdWxsAHNldF9GbGF0VGF4UGFpZF9J
c051bGwAc2V0X0RhdGVTb2xkX0lzTnVsbABzZXRfQ29tcG91bmRfSXNOdWxsAHNldF9Ub3RhbFBy
aWNlX0lzTnVsbABzZXRfUnhTb3VyY2VfSXNOdWxsAHNldF9SZWpDb2RlX0lzTnVsbABzZXRfRlFO
RmlsZU5hbWVfSXNOdWxsAHNldF9Eb2N0b3JOYW1lX0lzTnVsbABzZXRfRXJyb3JEYXRlVGltZV9J
c051bGwAc2V0X1ByZXNjcmliZXJQaG9uZV9Jc051bGwAc2V0X01lc3NhZ2VSZXNwb25zZV9Jc051
bGwAc2V0X1R4UmVzcG9uc2VfSXNOdWxsAHNldF9Sb3dDcmVhdGVkRGF0ZV9Jc051bGwAc2V0X1J4
RGF0ZV9Jc051bGwAc2V0X1BDVFRheFJhdGVfSXNOdWxsAHNldF9Hcm9zc0FtdER1ZV9Jc051bGwA
c2V0X05EQ1dyaXR0ZW5fSXNOdWxsAHNldF9FcnJvckRlc2NyaXB0aW9uX0lzTnVsbABzZXRfQklO
TmJyX0lzTnVsbABzZXRfUmZOYnJfSXNOdWxsAHNldF9Hcm91cE5icl9Jc051bGwAc2V0X1J4TmJy
X0lzTnVsbABzZXRfQ2xhaW1BdXRoTnVtYmVyX0lzTnVsbABzZXRfRmlsZUVycm9yUm93TnVtYmVy
X0lzTnVsbABzZXRfRmlsZURpcl9Jc051bGwAc2V0X1BDVFRheEJhc2lzX0lzTnVsbABzZXRfUnhE
aXNjb3VudF9Jc051bGwAc2V0X1BsYW5BbW91bnRfSXNOdWxsAHNldF9PdGhlckFtb3VudF9Jc051
bGwAc2V0X0NvUGF5QW1vdW50X0lzTnVsbABzZXRfRGF5U3VwcGx5X0lzTnVsbABTZXROdWxsAGNv
bABnZXRfSXRlbQBzZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAHNldF9ORENX
cml0dGVuAGZuAFNjcmlwdE1haW4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6
YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ASW52YWxpZE9wZXJhdGlvbkV4Y2VwdGlvbgBzZXRfRXJy
b3JEZXNjcmlwdGlvbgBDdWx0dXJlSW5mbwBPdXRwdXROYW1lTWFwAE91dHB1dE1hcABNaWNyb3Nv
ZnQuU3FsU2VydmVyLkRUU1J1bnRpbWVXcmFwAGlucABDaGFyAHNldF9CSU5OYnIAc2V0X1JmTmJy
AHNldF9Hcm91cE5icgBzZXRfUnhOYnIAc2V0X0NsYWltQXV0aE51bWJlcgBzZXRfRmlsZUVycm9y
Um93TnVtYmVyAFN0cmVhbVJlYWRlcgBUZXh0UmVhZGVyAFBpcGVsaW5lQnVmZmVyAFNjcmlwdEJ1
ZmZlcgBSeDMwT3V0QnVmZmVyAEVycm9yT3V0QnVmZmVyAGdldF9SZXNvdXJjZU1hbmFnZXIATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVyAHNldF9GaWxlRGlyAFdyaXRlRXJy
b3IALmN0b3IALmNjdG9yAE91dHB1dElEcwBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRp
bWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNDXzBiZjExZDg1NzM2NzQ4Y2M4
OGM5MThmODRiZTc3Y2M5LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdN
b2RlcwBTQ18wYmYxMWQ4NTczNjc0OGNjODhjOTE4Zjg0YmU3N2NjOS5Qcm9wZXJ0aWVzAGdldF9S
ZWFkT25seVZhcmlhYmxlcwBCdWZmZXJDb2x1bW5JbmRleGVzAEdldENvbHVtbkluZGV4ZXMAU2V0
dGluZ3MAc2V0X1BDVFRheEJhc2lzAE1heENvbHMAU3lzdGVtLlRleHQuUmVndWxhckV4cHJlc3Np
b25zAENvbm5lY3Rpb25zAE5vblByaW50YWJsZUNoYXJzAEJ1ZmZlcnMARmluaXNoT3V0cHV0cwBD
cmVhdGVOZXdPdXRwdXRSb3dzAE9iamVjdABkdABTZXRFbmRPZlJvd3NldABsZWZ0AFNwbGl0AGdl
dF9EZWZhdWx0AGluSW50AFVzZXJDb21wb25lbnQAUGFyZW50Q29tcG9uZW50AFNjcmlwdENvbXBv
bmVudABzZXRfUnhEaXNjb3VudABzZXRfUGxhbkFtb3VudABzZXRfT3RoZXJBbW91bnQAc2V0X0Nv
UGF5QW1vdW50AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQATWljcm9zb2Z0LlNxbFNlcnZl
ci5QaXBlbGluZUhvc3QAUHJpbWVPdXRwdXQAR2V0VmFsdWVXaXRoQ29udGV4dABTY3JpcHRDb21w
b25lbnRFdmFsQ29udGV4dABnZXRfRXZhbHVhdG9yQ29udGV4dABnZXRfTm93AEFkZFJvdwBFcnJS
b3cAUmVnZXgAQXJyYXkAZ2V0X0Fzc2VtYmx5AHNldF9EYXlTdXBwbHkAAAALWwAAAC0AHwBdAAED
CQAAAQBHTgBvAG4AcAByAGkAbgB0AGEAYgBsAGUAIABkAGEAdABhACAAZgBvAHUAbgBkACAAaQBu
ACAAdABoAGUAIAByAG8AdwAuAAAzTgBvAHQAIABlAG4AbwB1AGcAaAAgAGMAbwBsAHUAbQBuAHMA
IABpAG4AIAByAG8AdwAABSAAIAAAAyAAAAcgACAAIAAAgJtJAHMATgB1AGwAbAAgAHAAcgBvAHAA
ZQByAHQAeQAgAGMAYQBuAG4AbwB0ACAAYgBlACAAcwBlAHQAIAB0AG8AIABGAGEAbABzAGUALgAg
AEEAcwBzAGkAZwBuACAAYQAgAHYAYQBsAHUAZQAgAHQAbwAgAHQAaABlACAAYwBvAGwAdQBtAG4A
IABpAG4AcwB0AGUAYQBkAC4AAA9SAHgAMwAwAE8AdQB0AAARRQByAHIAbwByAE8AdQB0AAAddgBh
AHIAUwB0AGEAZwBpAG4AZwBGAGkAbABlAABxUwBDAF8AMABiAGYAMQAxAGQAOAA1ADcAMwA2ADcA
NAA4AGMAYwA4ADgAYwA5ADEAOABmADgANABiAGUANwA3AGMAYwA5AC4AUAByAG8AcABlAHIAdABp
AGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAADmKSHxudaLS7Na/2hFDD9TAAQgAQEIAyAAAQUgAQER
EQQgAQEOBSABARFpAyAADgMgAAgFIAIOCAgEIAECDhYHDQ4OHQ4dAwgICA4SPRE5ETkSQRE5BiAB
HQ4dAwUgAg4ODgQAABE5BCABCAgJIAMBEk0dCBJRBSACAQgcAyAAAgMHAQgGAAIIElEOBSABHQgI
BSAAEoCZBiABEoCdHAUAABKAoQYgARwSgKUIAAESgKkRgK0FIAASgLEHIAIBDhKAsQi3elxWGTTg
iQiJhF3NgIDMkQQAAAAABAEAAAAEAgAAAAQDAAAABAQAAAAEBQAAAAQGAAAABAcAAAAECAAAAAQJ
AAAABAoAAAAECwAAAAQMAAAABA0AAAAEDgAAAAQPAAAABBAAAAAEEQAAAAQSAAAABBMAAAAEFAAA
AAQVAAAABBYAAAAEFwAAAAQYAAAABBkAAAAEGgAAAAQbAAAABBwAAAAEHQAAAAQeAAAABB8AAAAE
IAAAAAQhAAAABCIAAAAEIwAAAAQkAAAABCUAAAAEJgAAAAQnAAAABCgAAAAEKQAAAAQqAAAABCsA
AAAELAAAAAQtAAAABC4AAAAELwAAAAQwAAAABDEAAAAEMgAAAAQzAAAABDQAAAAENQAAAAQ2AAAA
AwYSGAMGEhwDBhIMAwYSEAMGElUDBhJhAwYSZQMGEiQCBggDBhEoBSACDg4ICSAFARE5DggODgQg
AQECBSABARE5CyAEAQgdCB0STRJRBSABARJVBAAAEmEEAAASZQUAAQESZQQAABIkAwAAAQMoAAgD
KAACAygADgQoABE5BAgAEmEECAASZQQIABIkCAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTQ18wYmYxMWQ4NTczNjc0OGNjODhjOTE4Zjg0YmU3N2Nj
OQAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDE3AABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9u
PXY0LjABAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQAtAAAAM7K774B
AAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lv
bj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUw
ODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQ
tAAAAOBpAAAAAAAAAAAAAPppAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADsaQAAAAAAAAAAAAAA
AF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAAB
AAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAAWIAAAOwDAAAAAAAAAAAAAOwDNAAAAFYA
UwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9BO/+AAABAAAAAQAAAAAAAAABAAAAAAA/
AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAA
AAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAAAAAAsARMAwAAAQBTAHQAcgBpAG4AZwBG
AGkAbABlAEkAbgBmAG8AAAAoAwAAAQAwADAAMAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUA
bgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBp
AGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMAQwBfADAAYgBmADEAMQBkADgANQA3ADMA
NgA3ADQAOABjAGMAOAA4AGMAOQAxADgAZgA4ADQAYgBlADcANwBjAGMAOQAAADAACAABAEYAaQBs
AGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgAwAC4AMAAAAHAAKAABAEkAbgB0AGUAcgBuAGEA
bABOAGEAbQBlAAAAUwBDAF8AMABiAGYAMQAxAGQAOAA1ADcAMwA2ADcANAA4AGMAYwA4ADgAYwA5
ADEAOABmADgANABiAGUANwA3AGMAYwA5AC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAA
eQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADcAAAAqAAEAAQBM
AGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEA
bABGAGkAbABlAG4AYQBtAGUAAABTAEMAXwAwAGIAZgAxADEAZAA4ADUANwAzADYANwA0ADgAYwBj
ADgAOABjADkAMQA4AGYAOAA0AGIAZQA3ADcAYwBjADkALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQA
dQBjAHQATgBhAG0AZQAAAAAAUwBDAF8AMABiAGYAMQAxAGQAOAA1ADcAMwA2ADcANAA4AGMAYwA4
ADgAYwA5ADEAOABmADgANABiAGUANwA3AGMAYwA5AAAANAAIAAEAUAByAG8AZAB1AGMAdABWAGUA
cgBzAGkAbwBuAAAAMQAuADAALgAwAC4AMAAAADgACAABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQBy
AHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAGAAAAwAAAAMOgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAA=]]></arrayElement>
                      </arrayElements>
                    </property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                      name="VSTAProjectName"
                      typeConverter="NOTBROWSABLE">SC_0bf11d85736748cc88c918f84be77cc9</property>
                    <property
                      dataType="System.String"
                      description="Specifies the programming language used by the script."
                      name="ScriptLanguage"
                      typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read-only variables."
                      name="ReadOnlyVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg">User::varStagingFile</property>
                    <property
                      dataType="System.String"
                      description="Specifies a comma-separated list of read/write variables."
                      name="ReadWriteVariables"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                    <property
                      dataType="System.String"
                      description="List of breakpoints present on the script."
                      isArray="true"
                      name="BreakpointCollection"
                      typeConverter="NOTBROWSABLE">
                      <arrayElements
                        arrayElementCount="0" />
                    </property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataChecksum"
                      typeConverter="NOTBROWSABLE">794972c6be43e38567fafa99df383f38</property>
                    <property
                      dataType="System.String"
                      name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
                    <property
                      dataType="System.String"
                      description="Checksum to match component metedata against compiled codes."
                      name="MetadataShaChecksum"
                      typeConverter="NOTBROWSABLE">3441dc46db554fc70aa9b6fcd83f0561cdc0ebdf</property>
                  </properties>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out]"
                      hasSideEffects="true"
                      name="Rx30Out">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FileRowID]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FileRowID]"
                          name="FileRowID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PharmID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PharmID]"
                          name="PharmID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BINNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BINNbr]"
                          name="BINNbr" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCN]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCN]"
                          name="PCN" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[GroupNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[GroupNbr]"
                          name="GroupNbr" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Submitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Submitted]"
                          name="Submitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxDate]"
                          name="RxDate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[QtyDispensed]"
                          codePage="1252"
                          dataType="str"
                          length="50"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[QtyDispensed]"
                          name="QtyDispensed" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DaySupply]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DaySupply]"
                          name="DaySupply" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NDCDispensed]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NDCDispensed]"
                          name="NDCDispensed" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FeeSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FeeSubmitted]"
                          name="FeeSubmitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CostSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CostSubmitted]"
                          name="CostSubmitted" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FeePaid]"
                          name="FeePaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CostPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CostPaid]"
                          name="CostPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PlanAmount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PlanAmount]"
                          name="PlanAmount" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CoPayAmount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CoPayAmount]"
                          name="CoPayAmount" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[UandC]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[UandC]"
                          name="UandC" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TotalPrice]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TotalPrice]"
                          name="TotalPrice" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BS]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BS]"
                          name="BS" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BR]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BR]"
                          name="BR" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[OI]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[OI]"
                          name="OI" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DAW]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DAW]"
                          name="DAW" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DAWDesc]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DAWDesc]"
                          name="DAWDesc" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PatientPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PatientPaid]"
                          name="PatientPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[GrossAmtDue]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[GrossAmtDue]"
                          name="GrossAmtDue" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PlanID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PlanID]"
                          name="PlanID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RejCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RejCode]"
                          name="RejCode" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[MessageResponse]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[MessageResponse]"
                          name="MessageResponse" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TxResponse]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TxResponse]"
                          name="TxResponse" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxNbr]"
                          name="RxNbr" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RfNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RfNbr]"
                          name="RfNbr" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PIDQ]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PIDQ]"
                          name="PIDQ" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PID]"
                          name="PID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DoctorName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DoctorName]"
                          name="DoctorName" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RA]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RA]"
                          name="RA" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NDCWritten]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NDCWritten]"
                          name="NDCWritten" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[OtherAmount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[OtherAmount]"
                          name="OtherAmount" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TYPE]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TYPE]"
                          name="TYPE" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Rx30Lic]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Rx30Lic]"
                          name="Rx30Lic" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Compound]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Compound]"
                          name="Compound" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NetworkReimbID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NetworkReimbID]"
                          name="NetworkReimbID" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PrescriberPhone]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PrescriberPhone]"
                          name="PrescriberPhone" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxSource]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxSource]"
                          name="RxSource" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DRDEA]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DRDEA]"
                          name="DRDEA" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[UnitAWP]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[UnitAWP]"
                          name="UnitAWP" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FlatTaxPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FlatTaxPaid]"
                          name="FlatTaxPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxPaid]"
                          name="PCTTaxPaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxRate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxRate]"
                          name="PCTTaxRate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxBasis]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxBasis]"
                          name="PCTTaxBasis" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[IncentiveFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[IncentiveFeePaid]"
                          name="IncentiveFeePaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[ProfFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[ProfFeePaid]"
                          name="ProfFeePaid" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PrescriberNPI]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PrescriberNPI]"
                          name="PrescriberNPI" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxDiscount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxDiscount]"
                          name="RxDiscount" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[ClaimAuthNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[ClaimAuthNumber]"
                          name="ClaimAuthNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FileDir]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FileDir]"
                          name="FileDir" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RowCreatedDate]"
                          name="RowCreatedDate" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DateSold]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DateSold]"
                          name="DateSold" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut]"
                      hasSideEffects="true"
                      name="ErrorOut">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDateTime]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDateTime]"
                          name="ErrorDateTime" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FQNFileName]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FQNFileName]"
                          name="FQNFileName" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FileErrorRowNumber]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[FileErrorRowNumber]"
                          name="FileErrorRowNumber" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorData]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorData]"
                          name="ErrorData" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDescription]"
                          codePage="1252"
                          dataType="str"
                          length="8000"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[ErrorDescription]"
                          name="ErrorDescription" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut].Columns[RowCreatedDate]"
                          name="RowCreatedDate" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
                <component
                  refId="Package\Foreach Loop Container\Parse and load file\StagingRX30"
                  componentClassID="Microsoft.OLEDBDestination"
                  contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                  description="OLE DB Destination"
                  name="StagingRX30"
                  usesDispositions="true"
                  version="4">
                  <properties>
                    <property
                      dataType="System.Int32"
                      description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                      name="CommandTimeout">0</property>
                    <property
                      dataType="System.String"
                      description="Specifies the name of the database object used to open a rowset."
                      name="OpenRowset">[Staging].[Rx30]</property>
                    <property
                      dataType="System.String"
                      description="Specifies the variable that contains the name of the database object used to open a rowset."
                      name="OpenRowsetVariable"></property>
                    <property
                      dataType="System.String"
                      description="The SQL command to be executed."
                      name="SqlCommand"
                      UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the column code page to use when code page information is unavailable from the data source."
                      name="DefaultCodePage">1252</property>
                    <property
                      dataType="System.Boolean"
                      description="Forces the use of the DefaultCodePage property value when describing character data."
                      name="AlwaysUseDefaultCodePage">false</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the mode used to access the database."
                      name="AccessMode"
                      typeConverter="AccessMode">3</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepIdentity">false</property>
                    <property
                      dataType="System.Boolean"
                      description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                      name="FastLoadKeepNulls">false</property>
                    <property
                      dataType="System.String"
                      description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                      name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                    <property
                      dataType="System.Int32"
                      description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                      name="FastLoadMaxInsertCommitSize">2147483647</property>
                  </properties>
                  <connections>
                    <connection
                      refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Connections[OleDbConnection]"
                      connectionManagerID="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                      connectionManagerRefId="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                      description="The OLE DB runtime connection used to access the database."
                      name="OleDbConnection" />
                  </connections>
                  <inputs>
                    <input
                      refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input]"
                      errorOrTruncationOperation="Insert"
                      errorRowDisposition="FailComponent"
                      hasSideEffects="true"
                      name="OLE DB Destination Input">
                      <inputColumns>
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[FileRowID]"
                          cachedDataType="i4"
                          cachedName="FileRowID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FileRowID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FileRowID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PharmID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PharmID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PharmID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PharmID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[BINNbr]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="BINNbr"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[BINNbr]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BINNbr]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PCN]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PCN"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCN]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCN]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[GroupNbr]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="GroupNbr"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[GroupNbr]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[GroupNbr]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[Submitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="Submitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[Submitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Submitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RxDate]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RxDate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxDate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxDate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[QtyDispensed]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="50"
                          cachedName="QtyDispensed"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[QtyDispensed]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[QtyDispensed]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[DaySupply]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DaySupply"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DaySupply]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DaySupply]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[NDCDispensed]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="NDCDispensed"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[NDCDispensed]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NDCDispensed]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[FeeSubmitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="FeeSubmitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FeeSubmitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FeeSubmitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[CostSubmitted]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="CostSubmitted"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[CostSubmitted]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CostSubmitted]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[FeePaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="FeePaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FeePaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FeePaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[CostPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="CostPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[CostPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CostPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PlanAmount]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PlanAmount"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PlanAmount]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PlanAmount]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[CoPayAmount]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="CoPayAmount"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[CoPayAmount]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[CoPayAmount]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[UandC]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="UandC"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[UandC]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[UandC]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[TotalPrice]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="TotalPrice"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[TotalPrice]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TotalPrice]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[BS]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="BS"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[BS]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BS]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[BR]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="BR"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[BR]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[BR]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[OI]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="OI"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[OI]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[OI]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[DAW]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DAW"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DAW]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DAW]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[DAWDesc]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DAWDesc"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DAWDesc]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DAWDesc]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PatientPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PatientPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PatientPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PatientPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[GrossAmtDue]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="GrossAmtDue"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[GrossAmtDue]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[GrossAmtDue]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PlanID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PlanID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PlanID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PlanID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RejCode]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RejCode"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RejCode]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RejCode]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[MessageResponse]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="MessageResponse"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[MessageResponse]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[MessageResponse]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[TxResponse]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="TxResponse"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[TxResponse]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TxResponse]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RxNbr]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RxNbr"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxNbr]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxNbr]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RfNbr]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RfNbr"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RfNbr]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RfNbr]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[DoctorName]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DoctorName"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DoctorName]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DoctorName]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RA]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RA"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RA]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RA]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[NDCWritten]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="NDCWritten"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[NDCWritten]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NDCWritten]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[OtherAmount]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="OtherAmount"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[OtherAmount]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[OtherAmount]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[TYPE]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="TYPE"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[TYPE]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[TYPE]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[Rx30Lic]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="Rx30Lic"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[Rx30Lic]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Rx30Lic]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[Compound]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="Compound"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[Compound]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[Compound]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[NetworkReimbID]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="NetworkReimbID"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[NetworkReimbID]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[NetworkReimbID]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PrescriberPhone]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberPhone"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberPhone]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PrescriberPhone]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RxSource]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RxSource"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxSource]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxSource]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[DRDEA]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DRDEA"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DRDEA]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DRDEA]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[UnitAWP]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="UnitAWP"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[UnitAWP]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[UnitAWP]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[FlatTaxPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="FlatTaxPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FlatTaxPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FlatTaxPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PCTTaxPaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PCTTaxPaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCTTaxPaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxPaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PCTTaxRate]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PCTTaxRate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCTTaxRate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxRate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PCTTaxBasis]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PCTTaxBasis"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCTTaxBasis]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PCTTaxBasis]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[IncentiveFeePaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="IncentiveFeePaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[IncentiveFeePaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[IncentiveFeePaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[ProfFeePaid]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ProfFeePaid"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[ProfFeePaid]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[ProfFeePaid]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PrescriberNPI]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PrescriberNPI"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberNPI]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PrescriberNPI]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RxDiscount]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="RxDiscount"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxDiscount]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RxDiscount]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[ClaimAuthNumber]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="ClaimAuthNumber"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[ClaimAuthNumber]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[ClaimAuthNumber]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[RowCreatedDate]"
                          cachedDataType="dbTimeStamp"
                          cachedName="RowCreatedDate"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RowCreatedDate]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[RowCreatedDate]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[DateSold]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="DateSold"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DateSold]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[DateSold]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[FileDir]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="1000"
                          cachedName="FileDir"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FileProcessed]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[FileDir]" />
                        <inputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].Columns[PIDQ]"
                          cachedCodepage="1252"
                          cachedDataType="str"
                          cachedLength="500"
                          cachedName="PIDQ"
                          externalMetadataColumnId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PID_Q]"
                          lineageId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out].Columns[PIDQ]" />
                      </inputColumns>
                      <externalMetadataColumns
                        isUsed="True">
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RowID]"
                          dataType="i4"
                          name="RowID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FileRowID]"
                          dataType="i4"
                          name="FileRowID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PharmID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PharmID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[BINNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="BINNbr" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCN]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PCN" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[GroupNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="GroupNbr" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[Submitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="Submitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxDate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RxDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[QtyDispensed]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="QtyDispensed" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DaySupply]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DaySupply" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[NDCDispensed]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="NDCDispensed" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FeeSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="FeeSubmitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[CostSubmitted]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="CostSubmitted" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="FeePaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[CostPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="CostPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PlanAmount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PlanAmount" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[CoPayAmount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="CoPayAmount" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[UandC]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="UandC" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[TotalPrice]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="TotalPrice" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[BS]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="BS" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[BR]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="BR" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[OI]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="OI" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DAW]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DAW" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DAWDesc]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DAWDesc" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PatientPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PatientPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[GrossAmtDue]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="GrossAmtDue" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PlanID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PlanID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RejCode]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RejCode" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[MessageResponse]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="MessageResponse" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[TxResponse]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="TxResponse" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RxNbr" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RfNbr]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RfNbr" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PID_Q]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PID_Q" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DoctorName]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DoctorName" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RA]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RA" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[NDCWritten]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="NDCWritten" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[OtherAmount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="OtherAmount" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[TYPE]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="TYPE" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[Rx30Lic]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="Rx30Lic" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[Compound]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="Compound" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[NetworkReimbID]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="NetworkReimbID" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberPhone]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberPhone" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxSource]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RxSource" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DRDEA]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DRDEA" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[UnitAWP]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="UnitAWP" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FlatTaxPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="FlatTaxPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCTTaxPaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PCTTaxPaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCTTaxRate]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PCTTaxRate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PCTTaxBasis]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PCTTaxBasis" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[IncentiveFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="IncentiveFeePaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[ProfFeePaid]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ProfFeePaid" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[PrescriberNPI]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="PrescriberNPI" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RxDiscount]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="RxDiscount" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[ClaimAuthNumber]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="ClaimAuthNumber" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[FileProcessed]"
                          codePage="1252"
                          dataType="str"
                          length="1000"
                          name="FileProcessed" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RowCreatedDate]"
                          dataType="dbTimeStamp"
                          name="RowCreatedDate" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[DateSold]"
                          codePage="1252"
                          dataType="str"
                          length="500"
                          name="DateSold" />
                        <externalMetadataColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input].ExternalColumns[RowversionID]"
                          dataType="bytes"
                          length="8"
                          name="RowversionID" />
                      </externalMetadataColumns>
                    </input>
                  </inputs>
                  <outputs>
                    <output
                      refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Outputs[OLE DB Destination Error Output]"
                      exclusionGroup="1"
                      isErrorOut="true"
                      name="OLE DB Destination Error Output"
                      synchronousInputId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input]">
                      <outputColumns>
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                          name="ErrorCode"
                          specialFlags="1" />
                        <outputColumn
                          refId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          dataType="i4"
                          lineageId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                          name="ErrorColumn"
                          specialFlags="2" />
                      </outputColumns>
                      <externalMetadataColumns />
                    </output>
                  </outputs>
                </component>
              </components>
              <paths>
                <path
                  refId="Package\Foreach Loop Container\Parse and load file.Paths[ErrorOut]"
                  endId="Package\Foreach Loop Container\Parse and load file\ErrorOut.Inputs[OLE DB Destination Input]"
                  name="ErrorOut"
                  startId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[ErrorOut]" />
                <path
                  refId="Package\Foreach Loop Container\Parse and load file.Paths[Rx30Out]"
                  endId="Package\Foreach Loop Container\Parse and load file\StagingRX30.Inputs[OLE DB Destination Input]"
                  name="Rx30Out"
                  startId="Package\Foreach Loop Container\Parse and load file\ParseFlatFile.Outputs[Rx30Out]" />
              </paths>
            </pipeline>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{3FBAAEFE-0056-483B-AD5C-B56C77E92F23}"
          DTS:From="Package\Foreach Loop Container\Parse and load file"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\Foreach Loop Container\Delete file" />
      </DTS:PrecedenceConstraints>
      <DTS:ForEachVariableMappings>
        <DTS:ForEachVariableMapping
          DTS:CreationName=""
          DTS:DTSID="{F80A2B7A-88F5-408A-A3E8-86A83B2247D6}"
          DTS:ObjectName="{F80A2B7A-88F5-408A-A3E8-86A83B2247D6}"
          DTS:ValueIndex="0"
          DTS:VariableName="User::varStagingFile" />
      </DTS:ForEachVariableMappings>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Get file Names for Loop"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{CEF4A65B-BFD2-4123-ABF5-1B4441979F84}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Get file Names for Loop"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Get file Names for Loop\OLE DB Source"
              componentClassID="Microsoft.OLEDBSource"
              contactInfo="OLE DB Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;7"
              description="OLE DB Source"
              name="OLE DB Source"
              usesDispositions="true"
              version="7">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset"></property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor">EXEC dbo.usp_ClaimsDDS_RX30_GetListOfFiles</property>
                <property
                  dataType="System.String"
                  description="The variable that contains the SQL command to be executed."
                  name="SqlCommandVariable"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">2</property>
                <property
                  dataType="System.String"
                  description="The mappings between the parameters in the SQL command and variables."
                  name="ParameterMapping"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Get file Names for Loop\OLE DB Source.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                  connectionManagerRefId="Package.ConnectionManagers[AAPDW1.ODSIntake]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output]"
                  name="OLE DB Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].Columns[FilePath]"
                      dataType="wstr"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[FilePath]"
                      length="500"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].Columns[FilePath]"
                      name="FilePath"
                      truncationRowDisposition="FailComponent" />
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].ExternalColumns[FilePath]"
                      dataType="wstr"
                      length="500"
                      name="FilePath" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output]"
                  isErrorOut="true"
                  name="OLE DB Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[FilePath]"
                      dataType="wstr"
                      length="500"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[FilePath]"
                      name="FilePath" />
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Get file Names for Loop\Recordset Destination"
              componentClassID="Microsoft.RecordsetDestination"
              contactInfo="Recordset Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Creates and populates an in-memory ADO recordset that is available outside of the data flow. Scripts and other package elements can use the recordset. For example, use a recordset to store the names of files that will be loaded into the data warehouse."
              name="Recordset Destination">
              <properties>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the recordset."
                  name="VariableName">User::ADORecordSet</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Get file Names for Loop\Recordset Destination.Inputs[Recordset Destination Input]"
                  hasSideEffects="true"
                  name="Recordset Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Get file Names for Loop\Recordset Destination.Inputs[Recordset Destination Input].Columns[FilePath]"
                      cachedDataType="wstr"
                      cachedLength="500"
                      cachedName="FilePath"
                      lineageId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output].Columns[FilePath]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Get file Names for Loop.Paths[OLE DB Source Output]"
              endId="Package\Get file Names for Loop\Recordset Destination.Inputs[Recordset Destination Input]"
              name="OLE DB Source Output"
              startId="Package\Get file Names for Loop\OLE DB Source.Outputs[OLE DB Source Output]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Update Stats on StagingRX30"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{764F3ECC-EA87-4ADC-9CC2-3C27EAD1E286}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Update Stats on StagingRX30"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2012; Â© 2007 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{EEBA9A97-8563-4CCB-AE99-CCB331CB2794}"
          SQLTask:SqlStatementSource="UPDATE STATISTICS [Staging].[Rx30];&#xA;&#xA;CHECKPOINT;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 1]"
      DTS:CreationName=""
      DTS:DTSID="{DF79B7F6-33E2-4D01-A165-601055937071}"
      DTS:From="Package\Get file Names for Loop"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 1"
      DTS:To="Package\Foreach Loop Container" />
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint 2]"
      DTS:CreationName=""
      DTS:DTSID="{96943F59-F6C8-4653-9B8D-08135CB09D64}"
      DTS:From="Package\Foreach Loop Container"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint 2"
      DTS:To="Package\Update Stats on StagingRX30" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="126,42"
          Id="Package\Foreach Loop Container\Delete file"
          TopLeft="37,101" />
        <NodeLayout
          Size="166,42"
          Id="Package\Foreach Loop Container\Parse and load file"
          TopLeft="12.5,20.5" />
        <EdgeLayout
          Id="Package\Foreach Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="97.75,62.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,38.5"
              Start="0,0"
              End="0,31">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,31" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="240,199"
          Size="240,242"
          Id="Package\Foreach Loop Container"
          TopLeft="256,105" />
        <NodeLayout
          Size="190,42"
          Id="Package\Get file Names for Loop"
          TopLeft="285,16" />
        <NodeLayout
          Size="217,42"
          Id="Package\Update Stats on StagingRX30"
          TopLeft="273,393" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="378,58">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,47"
              Start="0,0"
              End="0,39.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,39.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="378.75,347">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,38.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Foreach Loop Container\Parse and load file">
    <LayoutInfo>
      <GraphLayout
        Capacity="8" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="119,42"
          Id="Package\Foreach Loop Container\Parse and load file\ErrorOut"
          TopLeft="269,163" />
        <NodeLayout
          Size="139,42"
          Id="Package\Foreach Loop Container\Parse and load file\StagingRX30"
          TopLeft="504,170" />
        <NodeLayout
          Size="138,42"
          Id="Package\Foreach Loop Container\Parse and load file\ParseFlatFile"
          TopLeft="404,68" />
        <EdgeLayout
          Id="Package\Foreach Loop Container\Parse and load file.Paths[ErrorOut]"
          TopLeft="473,110">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-144.5,53"
              Start="0,0"
              End="-144.5,45.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,22.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,22.5"
                    Point2="0,26.5"
                    Point3="-4,26.5" />
                  <mssgle:LineSegment
                    End="-140.5,26.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-140.5,26.5"
                    Point2="-144.5,26.5"
                    Point3="-144.5,30.5" />
                  <mssgle:LineSegment
                    End="-144.5,45.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-91.79638671875,31.5,39.0927734375,9.5732421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Foreach Loop Container\Parse and load file.Paths[Rx30Out]"
          TopLeft="494.666666666667,110">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="78.8333333333334,60"
              Start="0,0"
              End="78.8333333333334,52.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.4126074498567" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.4126074498567"
                    Point2="0,24.4126074498567"
                    Point3="4,24.4126074498567" />
                  <mssgle:LineSegment
                    End="74.8333333333334,24.4126074498567" />
                  <mssgle:CubicBezierSegment
                    Point1="74.8333333333334,24.4126074498567"
                    Point2="78.8333333333334,24.4126074498567"
                    Point3="78.8333333333334,28.4126074498567" />
                  <mssgle:LineSegment
                    End="78.8333333333334,52.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="19.7502799479167,29.4126074498567,39.3327734375,9.5732421875"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach Loop Container\Parse and load file\StagingRX30">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Foreach Loop Container\Parse and load file\ErrorOut">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <TaskHost
    design-time-name="Package\Get file Names for Loop">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="182,42"
          Id="Package\Get file Names for Loop\Recordset Destination"
          TopLeft="333,168" />
        <NodeLayout
          Size="150,42"
          Id="Package\Get file Names for Loop\OLE DB Source"
          TopLeft="272,61" />
        <EdgeLayout
          Id="Package\Get file Names for Loop.Paths[OLE DB Source Output]"
          TopLeft="347,103">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="77,65"
              Start="0,0"
              End="77,57.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,28.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,28.5"
                    Point2="0,32.5"
                    Point3="4,32.5" />
                  <mssgle:LineSegment
                    End="73,32.5" />
                  <mssgle:CubicBezierSegment
                    Point1="73,32.5"
                    Point2="77,32.5"
                    Point3="77,36.5" />
                  <mssgle:LineSegment
                    End="77,57.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Get file Names for Loop\OLE DB Source">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>